var documenterSearchIndex = {"docs":
[{"location":"getting-started/#Getting-Started","page":"Getting Started","title":"Getting Started","text":"","category":"section"},{"location":"getting-started/#You-will-need","page":"Getting Started","title":"You will need","text":"","category":"section"},{"location":"getting-started/","page":"Getting Started","title":"Getting Started","text":"Julia 1.0 or higher.\nPython 3.5 or higher.","category":"page"},{"location":"getting-started/#Install-the-Julia-package","page":"Getting Started","title":"Install the Julia package","text":"","category":"section"},{"location":"getting-started/","page":"Getting Started","title":"Getting Started","text":"using Pkg\npkg\"add Python\"","category":"page"},{"location":"getting-started/#Install-the-Python-package-(optional)","page":"Getting Started","title":"Install the Python package (optional)","text":"","category":"section"},{"location":"getting-started/","page":"Getting Started","title":"Getting Started","text":"This step is only required if you wish to call Julia from Python.","category":"page"},{"location":"getting-started/","page":"Getting Started","title":"Getting Started","text":"Currently the Python package julia is shipped with the source of the Julia package, and must be pip-installed manually. The following should work in most shells (including PowerShell):","category":"page"},{"location":"getting-started/","page":"Getting Started","title":"Getting Started","text":"pip install --upgrade $(julia -e \"using Python; print(Python.juliapypath)\")","category":"page"},{"location":"getting-started/","page":"Getting Started","title":"Getting Started","text":"Note that this is a very small \"bootstrap\" package whose sole job is to locate and load Julia; the main functionality is in the main Julia package. Hence it is not necessary to upgrage the Python package every time you upgrade the Julia one.","category":"page"},{"location":"getting-started/","page":"Getting Started","title":"Getting Started","text":"Note also that regardless of installing the julia package, a module called julia will always be loaded into the interpreter by the Python package. This means that other Python packages can always import julia.","category":"page"},{"location":"getting-started/#Environment-variables","page":"Getting Started","title":"Environment variables","text":"","category":"section"},{"location":"getting-started/","page":"Getting Started","title":"Getting Started","text":"If Julia and Python are in your PATH, then no further set-up is required. Otherwise, the following environment variables control how the package finds these.","category":"page"},{"location":"getting-started/","page":"Getting Started","title":"Getting Started","text":"PYTHONJL_EXE: Path to the Python executable. Or the special value CONDA which uses Python from the default conda environment, or CONDA:{env} to use the given environment.\nPYTHONJL_LIB: Path to the Python library. Normally this is inferred from the Python executable, but can be over-ridden.\nJULIAPY_EXE: Path to the Julia executable.\nJULIAPY_LIB: Path to the Julia library. Normally this is inferred from the Julia executable, but can be over-ridden.","category":"page"},{"location":"juliapy/#The-Python-module-julia","page":"The Python module julia","title":"The Python module julia","text":"","category":"section"},{"location":"juliapy/","page":"The Python module julia","title":"The Python module julia","text":"For interactive or scripting use, the simplest way to get started is:","category":"page"},{"location":"juliapy/","page":"The Python module julia","title":"The Python module julia","text":"from julia import Main as jl","category":"page"},{"location":"juliapy/","page":"The Python module julia","title":"The Python module julia","text":"This loads a single variable jl (a julia.ModuleValue) which represents the Main module in Julia, from which all of Julia's functionality is available.","category":"page"},{"location":"juliapy/","page":"The Python module julia","title":"The Python module julia","text":"If you are writing a package which uses Julia, then to avoid polluting the global Main namespace you should do:","category":"page"},{"location":"juliapy/","page":"The Python module julia","title":"The Python module julia","text":"import julia; jl = julia.newmodule(\"SomeName\");","category":"page"},{"location":"juliapy/","page":"The Python module julia","title":"The Python module julia","text":"Now you can do jl.rand(jl.Bool, 5, 5), which is equivalent to rand(Bool, 5, 5) in Julia.","category":"page"},{"location":"juliapy/","page":"The Python module julia","title":"The Python module julia","text":"When a Python value is passed to Julia, then typically it will be converted according to this table with T=Any. Sometimes a more specific type will be used, such as when assigning to an array whose element type is known.","category":"page"},{"location":"juliapy/","page":"The Python module julia","title":"The Python module julia","text":"When a Julia value is returned to Python, it will normally be converted according to this table.","category":"page"},{"location":"juliapy/#Wrapper-types","page":"The Python module julia","title":"Wrapper types","text":"","category":"section"},{"location":"juliapy/","page":"The Python module julia","title":"The Python module julia","text":"Apart from a few fundamental immutable types (see here), all Julia values are by default converted into Python to some julia.AnyValue object, which wraps the original value. Some types are converted to a subclass of julia.AnyValue which provides additional Python semantics –- e.g. Julia vectors are interpreted as Python sequences.","category":"page"},{"location":"juliapy/","page":"The Python module julia","title":"The Python module julia","text":"There is also a julia.RawValue object, which gives a stricter \"Julia-only\" interface, documented below. These types all inherit from julia.ValueBase:","category":"page"},{"location":"juliapy/","page":"The Python module julia","title":"The Python module julia","text":"julia.ValueBase\njulia.RawValue\njulia.AnyValue\njulia.NumberValue\njulia.ComplexValue\njulia.RealValue\njulia.RationalValue\njulia.IntegerValue\njulia.ArrayValue\njulia.VectorValue\njulia.DictValue\njulia.SetValue\njulia.IOValue\njulia.RawIOValue\njulia.BufferedIOValue\njulia.TextIOValue\njulia.ModuleValue\njulia.TypeValue","category":"page"},{"location":"juliapy/","page":"The Python module julia","title":"The Python module julia","text":"<article class=\"docstring\">\n    <header>\n        <a class=\"docstring-binding\" id=\"julia.AnyValue\" href=\"#julia.AnyValue\">julia.AnyValue</a>\n        —\n        <span class=\"docstring-category\">Python Class</span>\n    </header>\n    <section>\n        <h6>Members</h6>\n        <ul>\n            <li><code>__jl_raw()</code>: Convert to a <a href=\"#julia.RawValue\"><code>julia.RawValue</code></a></li>\n        </ul>\n    </section>\n</article>","category":"page"},{"location":"juliapy/","page":"The Python module julia","title":"The Python module julia","text":"<article class=\"docstring\">\n    <header>\n        <a class=\"docstring-binding\" id=\"julia.NumberValue\" href=\"#julia.NumberValue\">julia.NumberValue</a>\n        —\n        <span class=\"docstring-category\">Python Class</span>\n    </header>\n    <section>\n        <p>This wraps any Julia <code>Number</code> value. It is a subclass of <code>numbers.Number</code> and behaves similar to other Python numbers.</p>\n        <p>There are also subtypes <code>julia.ComplexValue</code>, <code>julia.RealValue</code>, <code>julia.RationalValue</code>, <code>julia.IntegerValue</code> which wrap values of the corresponding Julia types, and are subclasses of the corresponding <code>numbers</code> ABC.</p>\n    </section>\n</article>","category":"page"},{"location":"juliapy/","page":"The Python module julia","title":"The Python module julia","text":"<article class=\"docstring\">\n    <header>\n        <a class=\"docstring-binding\" id=\"julia.ArrayValue\" href=\"#julia.ArrayValue\">julia.ArrayValue</a>\n        —\n        <span class=\"docstring-category\">Python Class</span>\n    </header>\n    <section>\n        <p>This wraps any Julia <code>AbstractArray</code> value. It is a subclass of <code>collections.abc.Collection</code>.</p>\n        <p>It supports zero-up indexing, and can be indexed with integers or slices. Slicing returns a view of the original array.</p>\n        <p>There is also the subtype <code>julia.VectorValue</code> which wraps any <code>AbstractVector</code>. It is a subclass of <code>collections.abc.Sequence</code> and behaves similar to a Python <code>list</code>.</p>\n        <p>If the array is strided and its eltype is supported (i.e. <code>Bool</code>, <code>IntXX</code>, <code>UIntXX</code>, <code>FloatXX</code>, <code>Complex{FloatXX}</code>, <code>Ptr{Cvoid}</code> or <code>Tuple</code> or <code>NamedTuple</code> of these) then it supports the buffer protocol and the numpy array interface. This means that <code>numpy.asarray(this)</code> will yield a view of the original array, so mutations are visible on the original.</p>\n        <p>Otherwise, the numpy <code>__array__</code> method is supported, and this returns an array of Python objects converted from the contents of the array. In this case, <code>numpy.asarray(this)</code> is a copy of the original array.</p>\n        <h6>Members</h6>\n        <ul>\n            <li><code>ndim</code>: The number of dimensions.</li>\n            <li><code>shape</code>: Tuple of lengths in each dimension.</li>\n            <li><code>copy()</code>: A copy of the array.</li>\n            <li><code>reshape(shape)</code>: A reshaped view of the array.</li>\n        </ul>\n    </section>\n</article>","category":"page"},{"location":"juliapy/","page":"The Python module julia","title":"The Python module julia","text":"<article class=\"docstring\">\n    <header>\n        <a class=\"docstring-binding\" id=\"julia.DictValue\" href=\"#julia.DictValue\">julia.DictValue</a>\n        —\n        <span class=\"docstring-category\">Python Class</span>\n    </header>\n    <section>\n        <p>This wraps any Julia <code>AbstractDict</code> value. It is a subclass of <code>collections.abc.Mapping</code> and behaves similar to a Python <code>dict</code>.</p>\n    </section>\n</article>","category":"page"},{"location":"juliapy/","page":"The Python module julia","title":"The Python module julia","text":"<article class=\"docstring\">\n    <header>\n        <a class=\"docstring-binding\" id=\"julia.SetValue\" href=\"#julia.SetValue\">julia.SetValue</a>\n        —\n        <span class=\"docstring-category\">Python Class</span>\n    </header>\n    <section>\n        <p>This wraps any Julia <code>AbstractSet</code> value. It is a subclass of <code>collections.abc.Set</code> and behaves similar to a Python <code>set</code>.</p>\n    </section>\n</article>","category":"page"},{"location":"juliapy/","page":"The Python module julia","title":"The Python module julia","text":"<article class=\"docstring\">\n    <header>\n        <a class=\"docstring-binding\" id=\"julia.IOValue\" href=\"#julia.IOValue\">julia.IOValue</a>\n        —\n        <span class=\"docstring-category\">Python Class</span>\n    </header>\n    <section>\n        <p>This wraps any Julia <code>IO</code> value. It is a subclass of <code>io.IOBase</code> and behaves like Python files.</p>\n        <p>There are also subtypes <code>julia.RawIOValue</code>, <code>julia.BufferedIOValue</code> and <code>julia.TextIOValue</code>, which are subclasses of <code>io.RawIOBase</code> (unbuffered bytes), <code>io.BufferedIOBase</code> (buffered bytes) and <code>io.TextIOBase</code> (text).</p>\n        <h6>Members</h6>\n        <ul>\n            <li><code>torawio()</code>: Convert to a <code>julia.RawIOValue</code>, an un-buffered bytes file-like object. (See also <a href=\"../pythonjl/#Python.pyrawio\"><code>pyrawio</code></a>.)\n            <li><code>tobufferedio()</code>: Convert to a <code>julia.BufferedIOValue</code>, an buffered bytes file-like object. Julia <code>IO</code> objects are converted to this by default. (See also <a href=\"../pythonjl/#Python.pybufferedio\"><code>pybufferedio</code></a>.)\n            <li><code>totextio()</code>: Convert to a <code>julia.TextIOValue</code>, a text file-like object. (See also <a href=\"../pythonjl/#Python.pytextio\"><code>pytextio</code></a>.)\n        </ul>\n    </section>\n</article>","category":"page"},{"location":"juliapy/","page":"The Python module julia","title":"The Python module julia","text":"<article class=\"docstring\">\n    <header>\n        <a class=\"docstring-binding\" id=\"julia.ModuleValue\" href=\"#julia.ModuleValue\">julia.ModuleValue</a>\n        —\n        <span class=\"docstring-category\">Python Class</span>\n    </header>\n    <section>\n        <p>This wraps any Julia <code>Module</code> value.</p>\n        <p>It is the same as <a href=\"#julia.AnyValue\"><code>julia.AnyValue</code></a> except for one additional convenience method:</p>\n        <ul>\n            <li><code>seval([module=self], code)</code>: Evaluates the given code (a string) in the given module.</li>\n        </ul>\n    </section>\n</article>","category":"page"},{"location":"juliapy/","page":"The Python module julia","title":"The Python module julia","text":"<article class=\"docstring\">\n    <header>\n        <a class=\"docstring-binding\" id=\"julia.TypeValue\" href=\"#julia.TypeValue\">julia.TypeValue</a>\n        —\n        <span class=\"docstring-category\">Python Class</span>\n    </header>\n    <section>\n        <p>This wraps any Julia <code>Type</code> value.</p>\n        <p>It is the same as <a href=\"#julia.AnyValue\"><code>julia.AnyValue</code></a> except that indexing is used to access Julia's \"curly\" syntax for specifying parametric types:</p>\n        <pre><code class=\"language-python hljs\"><span class=\"hljs-keyword\">from</span> julia <span class=\"hljs-keyword\">import</span> Main <span class=\"hljs-keyword\">as</span> jl\njl.Vector[jl.Int]() <span class=\"hljs-comment\"># equivalent to Vector{Int}() in Julia</span></code></pre>\n    </section>\n</article>","category":"page"},{"location":"juliapy/","page":"The Python module julia","title":"The Python module julia","text":"<article class=\"docstring\">\n    <header>\n        <a class=\"docstring-binding\" id=\"julia.RawValue\" href=\"#julia.RawValue\">julia.RawValue</a>\n        —\n        <span class=\"docstring-category\">Python Class</span>\n    </header>\n    <section>\n        <p>This can wrap any Julia value.</p>\n        <h6>Members</h6>\n        <ul>\n            <li><code>__jl_any()</code>: Convert to a <a href=\"#julia.AnyValue\"><code>julia.AnyValue</code></a> (or subclass). (See also <a href=\"../pythonjl/#Python.pyjl\">pyjl</a>.)</li>\n        </ul>\n    </section>\n</article>","category":"page"},{"location":"conversion/#Conversion-Rules","page":"Conversion Rules","title":"Conversion Rules","text":"","category":"section"},{"location":"conversion/","page":"Conversion Rules","title":"Conversion Rules","text":"This page documents the rules used to convert values between Julia and Python.","category":"page"},{"location":"conversion/","page":"Conversion Rules","title":"Conversion Rules","text":"In both directions, the default behaviour is to allow conversion between immutable values. Mutable values will be \"wrapped\" so that mutations on the wrapper affect the original object.","category":"page"},{"location":"conversion/#Julia-to-Python","page":"Conversion Rules","title":"Julia to Python","text":"","category":"section"},{"location":"conversion/","page":"Conversion Rules","title":"Conversion Rules","text":"When a Julia object is converted to a Python one (e.g. by calling PyObject, by interpolating it into a @py command, or passing it as an argument to a Python function) the following rules are used by default.","category":"page"},{"location":"conversion/","page":"Conversion Rules","title":"Conversion Rules","text":"The user can always explicitly choose a different conversion (e.g. by calling pylist or pydict).","category":"page"},{"location":"conversion/","page":"Conversion Rules","title":"Conversion Rules","text":"From To\nAny Python object type (PyObject, PyList, etc.) itself\nNothing, Missing None\nBool bool\nStandard integer (IntXX, UIntXX, BigInt) int\nStandard rational (Rational{T}, T a standard integer) fractions.Fraction\nStandard float (FloatXX) float\nStandard complex (Complex{T}, T a standard float) complex\nStandard string/char (String and SubString{String}, Char) str\nTuple tuple\nStandard integer range (AbstractRange{T}, T a standard integer) range\nDate, Time, DateTime (from Dates) date, time, datetime (from datetime)\nSecond, Millisecond, Microsecond, Nanosecond (from Dates) timedelta (from datetime)\nNumber julia.NumberValue, julia.ComplexValue, etc.\nAbstractArray julia.ArrayValue, julia.VectorValue\nAbstractDict julia.DictValue\nAbstractSet julia.SetValue\nIO julia.BufferedIOValue\nModule julia.ModuleValue\nType julia.TypeValue\nAnything else julia.AnyValue","category":"page"},{"location":"conversion/","page":"Conversion Rules","title":"Conversion Rules","text":"The julia.*Value types are all subtypes of julia.AnyValue. They wrap a Julia value, providing access to Julia semantics: it can be called, indexed, and so on. Subtypes add additional Pythonic semantics. Read more here.","category":"page"},{"location":"conversion/","page":"Conversion Rules","title":"Conversion Rules","text":"This conversion policy is defined/implemented by Python.C.PyObject_From and Python.C.PyJuliaValue_From. Package authors can (carefully) overload these with additional rules for custom types.","category":"page"},{"location":"conversion/#Python-to-Julia","page":"Conversion Rules","title":"Python to Julia","text":"","category":"section"},{"location":"conversion/","page":"Conversion Rules","title":"Conversion Rules","text":"From Julia, one can convert Python objects to a desired type using pyconvert(T, x) for example, or @pyv `...`::T.","category":"page"},{"location":"conversion/","page":"Conversion Rules","title":"Conversion Rules","text":"From Python, when a value is passed to Julia, it is typically converted to a corresponding Julia value using pyconvert(Any, x).","category":"page"},{"location":"conversion/","page":"Conversion Rules","title":"Conversion Rules","text":"Quite general conversions are allowed, and the target type T can be as specific as you like. For example @pyv `[1, None, 3]`::Tuple{Vararg{Union{AbstractFloat,Missing}}} will evaluate to (1.0, missing, 2.0).","category":"page"},{"location":"conversion/","page":"Conversion Rules","title":"Conversion Rules","text":"The following table specifies the conversion rules in place. If the initial Python type matches the \"From\" column and the desired type T intersects with the \"To\" column, then that conversion is attempted. Conversions are tried in priority order, then in specificity order.","category":"page"},{"location":"conversion/","page":"Conversion Rules","title":"Conversion Rules","text":"From To\nTop priority (wrapped values). \njulia.AnyValue Any\nVery high priority (arrays). \nObjects satisfying the buffer or array interface (inc. bytes, bytearray, array.array, numpy.ndarray) PyArray\nHigh priority (canonical conversions). \nNone Nothing\nbool Bool\nnumbers.Integral (inc. int) Integer (prefers Int, or BigInt on overflow)\nfloat Float64\ncomplex Complex{Float64}\nrange StepRange\nstr String\ntuple Tuple\ncollections.abc.Mapping (inc. dict) PyDict\ncollections.abc.Sequence (inc. list) PyList\ncollections.abc.Set (inc. set, frozenset) PySet\nio.IOBase (includes open files) PyIO\ndatetime.date/datetime.time/datetime.datetime Date/Time/DateTime\ndatetime.timedelta Microsecond (or Millisecond or Second on overflow)\nnumpy.intXX/numpy.uintXX/numpy.floatXX IntXX/UIntXX/FloatXX\nStandard priority (other reasonable conversions). \nNone Missing\nbytes Vector{UInt8}, Vector{Int8}, String\nstr String, Symbol, Char, Vector{UInt8}, Vector{Int8}\nrange UnitRange\ncollections.abc.Mapping Dict\ncollections.abc.Iterable Vector, Set, Tuple, Pair\ndatetime.timedelta Dates.CompoundPeriod\nnumbers.Integral Integer, Rational, Real, Number\nnumbers.Real AbstractFloat, Number\nnumbers.Complex Complex, Number\nctypes.c_int and other integers Integer, Rational, Real, Number\nctypes.c_float/ctypes.c_double Cfloat/Cdouble, AbstractFloat, Real, Number\nctypes.c_voidp Ptr{Cvoid}, Ptr\nctypes.c_char_p Cstring, Ptr{Cchar}, Ptr\nctypes.c_wchar_p Cwstring, Ptr{Cwchar}, Ptr\nnumpy.intXX/numpy.uintXX/numpy.floatXX Integer, Rational, Real, Number\nLow priority (fallback to PyObject). \nAnything PyObject\nBottom priority (must be explicitly specified by excluding PyObject). \nObjects satisfying the buffer interface PyBuffer\nAnything PyRef","category":"page"},{"location":"conversion/","page":"Conversion Rules","title":"Conversion Rules","text":"Package authors can (carefully) add extra rules by calling Python.C.PyObject_TryConvert_AddRule in __init__.","category":"page"},{"location":"compat/#Compatability-Tools","page":"Compatability Tools","title":"Compatability Tools","text":"","category":"section"},{"location":"compat/","page":"Compatability Tools","title":"Compatability Tools","text":"Some packages require a little extra help to work nicely from Python.jl.","category":"page"},{"location":"compat/","page":"Compatability Tools","title":"Compatability Tools","text":"Some of these are \"fixes\" that are silently applied for you, and some are just extra functions to bridge a gap. We aim to keep these as minimal as possible.","category":"page"},{"location":"compat/#Stdlib","page":"Compatability Tools","title":"Stdlib","text":"","category":"section"},{"location":"compat/","page":"Compatability Tools","title":"Compatability Tools","text":"Whenever a Python exception is displayed by Julia, sys.last_traceback and friends are set. This allows the post-mortem debugger pdb.pm() to work. Disable by setting Python.CONFIG.sysautolasttraceback = false.","category":"page"},{"location":"compat/#Tabular-data-and-Pandas","page":"Compatability Tools","title":"Tabular data & Pandas","text":"","category":"section"},{"location":"compat/","page":"Compatability Tools","title":"Compatability Tools","text":"A pandas.DataFrame can be wrapped in Julia as a PyPandasDataFrame, providing a Tables.jl-compatible interface.","category":"page"},{"location":"compat/","page":"Compatability Tools","title":"Compatability Tools","text":"In the other direction, the following functions can be used to convert any Tables.jl-compatible table to a Python table.","category":"page"},{"location":"compat/","page":"Compatability Tools","title":"Compatability Tools","text":"pycolumntable\npyrowtable\npypandasdataframe","category":"page"},{"location":"compat/#Python.pycolumntable","page":"Compatability Tools","title":"Python.pycolumntable","text":"pycolumntable([T=PyObject,] src) :: T\n\nConstruct a \"column table\" from the Tables.jl-compatible table src, namely a Python dict mapping column names to column vectors.\n\n\n\n\n\n","category":"function"},{"location":"compat/#Python.pyrowtable","page":"Compatability Tools","title":"Python.pyrowtable","text":"pyrowtable([T=PyObject,] src) :: T\n\nConstruct a \"row table\" from the Tables.jl-compatible table src, namely a Python list of rows, each row being a Python dict mapping column names to values.\n\n\n\n\n\n","category":"function"},{"location":"compat/#Python.pypandasdataframe","page":"Compatability Tools","title":"Python.pypandasdataframe","text":"pypandasdataframe([T=PyObject,] [src]; ...) :: T\n\nConstruct a pandas dataframe from src.\n\nUsually equivalent to pyimport(\"pandas\").DataFrame(src, ...), but src may also be Tables.jl-compatible table.\n\n\n\n\n\n","category":"function"},{"location":"compat/#MatPlotLib-/-PyPlot","page":"Compatability Tools","title":"MatPlotLib / PyPlot","text":"","category":"section"},{"location":"compat/","page":"Compatability Tools","title":"Compatability Tools","text":"pyplotshow","category":"page"},{"location":"compat/#Python.pyplotshow","page":"Compatability Tools","title":"Python.pyplotshow","text":"pyplotshow([fig]; close=true, [format])\n\nShow the matplotlib/pyplot/seaborn/etc figure fig, or all open figures if not given, using Julia's display mechanism.\n\nIf close is true, the figure is also closed.\n\nThe format specifies the file format of the generated image. By default this is pyplot.rcParams[\"savefig.format\"]. It can be one of \"png\", \"jpg\", \"jpeg\", \"tif\", \"tiff\", \"svg\" or \"pdf\".\n\n\n\n\n\n","category":"function"},{"location":"compat/","page":"Compatability Tools","title":"Compatability Tools","text":"If Julia is running an IJulia kernel, pyplotshow() is automatically called after executing a cell, so that plots generated in a cell are always shown (similar to IPython). It can be disabled by setting Python.CONFIG.pyplotautoshow = false.","category":"page"},{"location":"compat/#GUIs-(including-MatPlotLib)","page":"Compatability Tools","title":"GUIs (including MatPlotLib)","text":"","category":"section"},{"location":"compat/#Event-loops","page":"Compatability Tools","title":"Event loops","text":"","category":"section"},{"location":"compat/","page":"Compatability Tools","title":"Compatability Tools","text":"If for example you wish to use PyPlot in interactive mode (matplotlib.pyplot.ion()) then activating the correct event loop will allow it to work.","category":"page"},{"location":"compat/","page":"Compatability Tools","title":"Compatability Tools","text":"Python.event_loop_on\nPython.event_loop_off","category":"page"},{"location":"compat/#Python.event_loop_on","page":"Compatability Tools","title":"Python.event_loop_on","text":"event_loop_on(g::Symbol; interval=40e-3, fix=false)\n\nActivate an event loop for the GUI framework g, so that the framework can run in the background of a Julia session.\n\nThe event loop runs every interval seconds. If fix is true and g is a Qt framework, then fix_qt_plugin_path is called.\n\nSupported values of g (and the Python module they relate to) are: :pyqt4 (PyQt4), :pyqt5 (PyQt5), :pyside (PySide), :pyside2 (PySide2), :gtk (gtk), :gtk3 (gi), :wx (wx), :tkinter (tkinter).\n\n\n\n\n\n","category":"function"},{"location":"compat/#Python.event_loop_off","page":"Compatability Tools","title":"Python.event_loop_off","text":"event_loop_off(g::Symbol)\n\nTerminate the event loop g if it is running.\n\n\n\n\n\n","category":"function"},{"location":"compat/#Interaction","page":"Compatability Tools","title":"Interaction","text":"","category":"section"},{"location":"compat/","page":"Compatability Tools","title":"Compatability Tools","text":"The following is an alternative to using event loops to enable interactive plotting.","category":"page"},{"location":"compat/","page":"Compatability Tools","title":"Compatability Tools","text":"pyinteract","category":"page"},{"location":"compat/#Python.pyinteract","page":"Compatability Tools","title":"Python.pyinteract","text":"pyinteract(; force=false, sleep=0.1)\n\nSome Python GUIs can work interactively, meaning the GUI is available but the interactive prompt is returned (e.g. after calling matplotlib.pyplot.ion()). To use these from Julia, currently you must manually call pyinteract() each time you want to interact.\n\nInternally, this is calling the PyOS_InputHook asynchronously. Only one copy is run at a time unless force is true.\n\nThe asynchronous task waits for sleep seconds before calling the hook function. This gives time for the next prompt to be printed and waiting for input. As a result, there will be a small delay before the GUI becomes interactive.\n\n\n\n\n\n","category":"function"},{"location":"compat/#Qt-path-fix","page":"Compatability Tools","title":"Qt path fix","text":"","category":"section"},{"location":"compat/","page":"Compatability Tools","title":"Compatability Tools","text":"Python.fix_qt_plugin_path","category":"page"},{"location":"compat/#Python.fix_qt_plugin_path","page":"Compatability Tools","title":"Python.fix_qt_plugin_path","text":"fix_qt_plugin_path()\n\nTry to set the QT_PLUGIN_PATH environment variable in Python, if not already set.\n\nThis fixes the problem that Qt does not know where to find its qt.conf file, because it always looks relative to sys.executable, which can be the Julia executable not the Python one when using this package.\n\nIf CONFIG.qtfix is true, then this is run automatically before PyQt4, PyQt5, PySide or PySide2 are imported.\n\n\n\n\n\n","category":"function"},{"location":"compat/#IPython","page":"Compatability Tools","title":"IPython","text":"","category":"section"},{"location":"compat/","page":"Compatability Tools","title":"Compatability Tools","text":"If Python is running an IPython kernel, then:","category":"page"},{"location":"compat/","page":"Compatability Tools","title":"Compatability Tools","text":"Julia's Base.stdout is set to Python's sys.stdout.\nAn IPythonDisplay is pushed onto Julia's display stack, so that display(x) goes to IPython if possible.","category":"page"},{"location":"#Python.jl","page":"Home","title":"Python.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Bringing Python and Julia together in seamless harmony:","category":"page"},{"location":"","page":"Home","title":"Home","text":"Call Python code from Julia and Julia code from Python via a symmetric interface.\nSimple syntax, so the Python code looks like Python and the Julia code looks like Julia.\nIntuitive and flexible conversions between Julia and Python: anything can be converted, you are in control.\nFast non-copying conversion of numeric arrays in either direction: modify Python arrays (e.g. bytes, array.array, numpy.ndarray) from Julia or Julia arrays from Python.\nHelpful wrappers: interpret Python sequences, dictionaries, arrays, dataframes and IO streams as their Julia couterparts, and vice versa.\nBeautiful stack-traces.\nWorks anywhere: tested on Windows, MacOS and Linux, 32- and 64-bit, Julia 1.0 upwards and Python 3.5 upwards.","category":"page"},{"location":"","page":"Home","title":"Home","text":"This is actually two modules working in harmony: a Julia one called Python and a tiny Python one called julia.","category":"page"},{"location":"pythonjl/#The-Julia-module-Python","page":"The Julia module Python","title":"The Julia module Python","text":"","category":"section"},{"location":"pythonjl/","page":"The Julia module Python","title":"The Julia module Python","text":"To get started, just do using Python. There are two main ways to use this module:","category":"page"},{"location":"pythonjl/","page":"The Julia module Python","title":"The Julia module Python","text":"Way 1: There is a collection of macros for directly executing Python code, interpolating Julia values in and extracting Julia values out. For example @pyv `$x+1`::Int adds x to 1 in Python and converts the result to an Int.","category":"page"},{"location":"pythonjl/","page":"The Julia module Python","title":"The Julia module Python","text":"Way 2: There is a collection of functions which typically produce and consume Python objects. The previous example can be implemented as pyadd(x, 1) or PyObject(x)+1.","category":"page"},{"location":"pythonjl/","page":"The Julia module Python","title":"The Julia module Python","text":"In all cases, when a Julia value needs to be passed to Python, it will be converted according to this table.","category":"page"},{"location":"pythonjl/","page":"The Julia module Python","title":"The Julia module Python","text":"When a Python value is returned to Julia, by default it will be as a PyObject. Most functions provide an optional way to specify the return type, in which case it will be converted according to this table.","category":"page"},{"location":"pythonjl/","page":"The Julia module Python","title":"The Julia module Python","text":"You can also specify one of the wrapper types as a return type.","category":"page"},{"location":"pythonjl/#Execute-Python-code","page":"The Julia module Python","title":"Execute Python code","text":"","category":"section"},{"location":"pythonjl/","page":"The Julia module Python","title":"The Julia module Python","text":"These macros are used to execute or evaluate Python code. The main differences between them are in whether/how any values are extracted out again.","category":"page"},{"location":"pythonjl/","page":"The Julia module Python","title":"The Julia module Python","text":"Note to package writers. These all expect there to be a variable pyglobals in scope, which is a Python dictionary giving the global scope. For convenience, this module exports such a variable so that these macros work in the REPL. However other packages should define their own global scope by defining const pyglobals = PyDict(). You can alternatively define const pyglobals = Python.pylazyobject(()->pyimport(\"some_module\").__dict__) to use the global scope of an existing Python module.","category":"page"},{"location":"pythonjl/","page":"The Julia module Python","title":"The Julia module Python","text":"@py\n@pyv\n@pyg\n@pya\n@pyr","category":"page"},{"location":"pythonjl/#Python.@py","page":"The Julia module Python","title":"Python.@py","text":"@py `...` [locals] [var=val, ...]\n\nExecute the given Python code.\n\nJulia values can be interpolated using the usual $(...) syntax.\n\nAdditionally, assignment to interpolations is supported: e.g. $(x::T) = ... will convert the right hand side to a T and assign it to x.\n\nCurrently only single assignment is supported. Multiple assignment ($x, $y = ...) or mutating assignment ($x += ...) will not be recognized.\nWhat actually happens is that the assignment is to a temporary Python variable, which is then read when execution successfully finishes. Hence if an exception occurs, no assignments will happen.\n\nThe globals are pyglobals. The locals are locals, if given, otherwise a temporary scope is created. Extra values to be interted into the scope can be given with extra var=val arguments.\n\n\n\n\n\n","category":"macro"},{"location":"pythonjl/#Python.@pyv","page":"The Julia module Python","title":"Python.@pyv","text":"@pyv `...`[::rettype] [locals] [var=val, ...]\n\nEvaluate the given Python expression and return its value.\n\nJulia values can be interpolated using the usual $(...) syntax.\n\nThe globals are pyglobals. The locals are locals, if given, otherwise a temporary scope is created. Extra values to be interted into the scope can be given with extra var=val arguments.\n\nThe result is converted to a rettype, which defaults to PyObject.\n\n\n\n\n\n","category":"macro"},{"location":"pythonjl/#Python.@pyg","page":"The Julia module Python","title":"Python.@pyg","text":"@pyg `...` [var=val, ...]\n\nExecute the given Python code in the global scope.\n\nThis is simply shorthand for @py `...` pyglobals (see @py).\n\n\n\n\n\n","category":"macro"},{"location":"pythonjl/#Python.@pya","page":"The Julia module Python","title":"Python.@pya","text":"@pya `...`[::rettype] [locals] [var=val, ...]\n\nExecute the given Python code and return ans.\n\nThis is the same as @py ... except that the variable ans is extracted from the scope and returned.\n\n\n\n\n\n","category":"macro"},{"location":"pythonjl/#Python.@pyr","page":"The Julia module Python","title":"Python.@pyr","text":"@pyr `...`[::rettype] [locals] [var=val, ...]\n\nExecute the given Python code in a function and return its return value.\n\nEssentially equivalent to @pya `def result(): ...; ans = result()`.\n\n\n\n\n\n","category":"macro"},{"location":"pythonjl/#PyObject","page":"The Julia module Python","title":"PyObject","text":"","category":"section"},{"location":"pythonjl/","page":"The Julia module Python","title":"The Julia module Python","text":"PyObject","category":"page"},{"location":"pythonjl/#Python.PyObject","page":"The Julia module Python","title":"Python.PyObject","text":"PyObject(x)\n\nConvert x to a Python object.\n\nThis is the default type returned by most API functions.\n\n\n\n\n\n","category":"type"},{"location":"pythonjl/","page":"The Julia module Python","title":"The Julia module Python","text":"TODO","category":"page"},{"location":"pythonjl/#Python-functions","page":"The Julia module Python","title":"Python functions","text":"","category":"section"},{"location":"pythonjl/#Construct-Python-objects","page":"The Julia module Python","title":"Construct Python objects","text":"","category":"section"},{"location":"pythonjl/","page":"The Julia module Python","title":"The Julia module Python","text":"These functions convert Julia values into Python objects of standard types.","category":"page"},{"location":"pythonjl/","page":"The Julia module Python","title":"The Julia module Python","text":"pynone\npybool\npyint\npyfloat\npystr\npybytes\npytuple\npylist\npycollist\npyrowlist\npyset\npyfrozenset\npydict\npyslice\npyellipsis\npynotimplemented\npymethod\npytype","category":"page"},{"location":"pythonjl/#Python.pynone","page":"The Julia module Python","title":"Python.pynone","text":"pynone([T=PyObject]) :: T\n\nEquivalent to None in Python.\n\n\n\n\n\n","category":"function"},{"location":"pythonjl/#Python.pybool","page":"The Julia module Python","title":"Python.pybool","text":"pybool([T=PyObject,] ...) :: T\n\nEquivalent to bool(...) in Python.\n\n\n\n\n\n","category":"function"},{"location":"pythonjl/#Python.pyint","page":"The Julia module Python","title":"Python.pyint","text":"pyint([T=PyObject,] ...) :: T\n\nEquivalent to int(...) in Python.\n\n\n\n\n\n","category":"function"},{"location":"pythonjl/#Python.pyfloat","page":"The Julia module Python","title":"Python.pyfloat","text":"pyfloat([T=PyObject,] ...) :: T\n\nEquivalent to float(...) in Python.\n\n\n\n\n\n","category":"function"},{"location":"pythonjl/#Python.pystr","page":"The Julia module Python","title":"Python.pystr","text":"pystr([T=PyObject,] x) :: T\n\nEquivalent to str(x) in Python.\n\n\n\n\n\n","category":"function"},{"location":"pythonjl/#Python.pybytes","page":"The Julia module Python","title":"Python.pybytes","text":"pybytes([T=PyObject,] x) :: T\n\nEquivalent to str(x) in Python.\n\n\n\n\n\n","category":"function"},{"location":"pythonjl/#Python.pytuple","page":"The Julia module Python","title":"Python.pytuple","text":"pytuple([T=PyObject,] [x]) :: T\n\nCreate a Python tuple from the elements of iterable x.\n\nIf x is a Python object, this is equivalent to tuple(x) in Python.\n\n\n\n\n\n","category":"function"},{"location":"pythonjl/#Python.pylist","page":"The Julia module Python","title":"Python.pylist","text":"pylist([T=PyObject,] [x]) :: T\n\nCreate a Python list from the elements of iterable x.\n\nIf x is a Python object, this is equivalent to list(x) in Python.\n\n\n\n\n\n","category":"function"},{"location":"pythonjl/#Python.pycollist","page":"The Julia module Python","title":"Python.pycollist","text":"pycollist([T=PyObject,] x::AbstractArray) :: T\n\nCreate a nested Python list-of-lists from the elements of x. For matrices, this is a list of columns.\n\n\n\n\n\n","category":"function"},{"location":"pythonjl/#Python.pyrowlist","page":"The Julia module Python","title":"Python.pyrowlist","text":"pyrowlist([T=PyObject,] x::AbstractArray) :: T\n\nCreate a nested Python list-of-lists from the elements of x. For matrices, this is a list of rows.\n\n\n\n\n\n","category":"function"},{"location":"pythonjl/#Python.pyset","page":"The Julia module Python","title":"Python.pyset","text":"pyset([T=PyObject,] [x]) :: T\n\nCreate a Python set from the elements of iterable x.\n\nIf x is a Python object, this is equivalent to set(x) in Python.\n\n\n\n\n\n","category":"function"},{"location":"pythonjl/#Python.pyfrozenset","page":"The Julia module Python","title":"Python.pyfrozenset","text":"pyfrozenset([T=PyObject,] [x]) :: T\n\nCreate a Python frozenset from the elements of iterable x.\n\nIf x is a Python object, this is equivalent to frozenset(x) in Python.\n\n\n\n\n\n","category":"function"},{"location":"pythonjl/#Python.pydict","page":"The Julia module Python","title":"Python.pydict","text":"pydict([T=PyObject,] [x]) :: T\npydict([T=PyObject;] key=value, ...)\n\nCreate a Python dict from the given key-value pairs in x or keyword arguments.\n\nIf x is a Python object, this is equivalent to dict(x) in Python.\n\n\n\n\n\n","category":"function"},{"location":"pythonjl/#Python.pyslice","page":"The Julia module Python","title":"Python.pyslice","text":"pyslice([T=PyObject,] [start,] stop, [step]) :: T\n\nEquivalent to slice(start, stop, step) in Python (or start:stop:step while indexing).\n\n\n\n\n\n","category":"function"},{"location":"pythonjl/#Python.pyellipsis","page":"The Julia module Python","title":"Python.pyellipsis","text":"pyellipsis([T=PyObject]) :: T\n\nEquivalent to Ellipsis in Python (or ... while indexing).\n\n\n\n\n\n","category":"function"},{"location":"pythonjl/#Python.pynotimplemented","page":"The Julia module Python","title":"Python.pynotimplemented","text":"pynotimplemented([T=PyObject]) :: T\n\nEquivalent to NotImplemented in Python.\n\n\n\n\n\n","category":"function"},{"location":"pythonjl/#Python.pymethod","page":"The Julia module Python","title":"Python.pymethod","text":"pymethod([T=PyObject,] x) :: T\n\nConvert x to a Python instance method.\n\n\n\n\n\n","category":"function"},{"location":"pythonjl/#Python.pytype","page":"The Julia module Python","title":"Python.pytype","text":"pytype([T=PyObject,] x) :: T\n\nEquivalent to type(x) in Python.\n\n\n\n\n\npytype([T=PyObject,] name, bases, dict) :: T\n\nEquivalent to type(name, bases, dict) in Python.\n\n\n\n\n\n","category":"function"},{"location":"pythonjl/#Wrap-Julia-values","page":"The Julia module Python","title":"Wrap Julia values","text":"","category":"section"},{"location":"pythonjl/","page":"The Julia module Python","title":"The Julia module Python","text":"These functions wrap Julia values into Python objects, documented here.","category":"page"},{"location":"pythonjl/","page":"The Julia module Python","title":"The Julia module Python","text":"pyjl\npyjlraw\npyisjl\npyjlgetvalue\npytextio\npyrawio\npybufferedio","category":"page"},{"location":"pythonjl/#Python.pyjl","page":"The Julia module Python","title":"Python.pyjl","text":"pyjl([T=PyObject,] x)\n\nWrap x as a Python julia.AnyValue (or subclass) object.\n\n\n\n\n\n","category":"function"},{"location":"pythonjl/#Python.pyjlraw","page":"The Julia module Python","title":"Python.pyjlraw","text":"pyjlraw([T=PyObject,] x)\n\nWrap x as a Python julia.RawValue object.\n\n\n\n\n\n","category":"function"},{"location":"pythonjl/#Python.pyisjl","page":"The Julia module Python","title":"Python.pyisjl","text":"pyisjl(o)\n\nTrue if o is a julia.ValueBase object.\n\n\n\n\n\n","category":"function"},{"location":"pythonjl/#Python.pyjlgetvalue","page":"The Julia module Python","title":"Python.pyjlgetvalue","text":"pyjlgetvalue()\n\n\n\n\n\n","category":"function"},{"location":"pythonjl/#Python.pytextio","page":"The Julia module Python","title":"Python.pytextio","text":"pytextio([T=PyObject], io::IO) :: T\n\nConvert io to a Python text IO stream, specifically a julia.TextIOValue.\n\n\n\n\n\n","category":"function"},{"location":"pythonjl/#Python.pyrawio","page":"The Julia module Python","title":"Python.pyrawio","text":"pyrawio([T=PyObject], io::IO) :: T\n\nConvert io to a Python raw (unbuffered byte) IO stream, specifically a julia.RawIOValue.\n\n\n\n\n\n","category":"function"},{"location":"pythonjl/#Python.pybufferedio","page":"The Julia module Python","title":"Python.pybufferedio","text":"pybufferedio([T=PyObject], io::IO) :: T\n\nConvert io to a Python buffered byte IO stream, specifically a julia.BufferedIOValue.\n\n\n\n\n\n","category":"function"},{"location":"pythonjl/#Python-builtins","page":"The Julia module Python","title":"Python builtins","text":"","category":"section"},{"location":"pythonjl/","page":"The Julia module Python","title":"The Julia module Python","text":"pyconvert\npyis\npyrepr\npyhasattr\npygetattr\npysetattr\npydir\npycall\npylen\npycontains\npyin\npygetitem\npysetitem\npydelitem\npyimport\npytruth\npyissubclass\npyisinstance\npyhash\npyiter\npywith","category":"page"},{"location":"pythonjl/#Python.pyconvert","page":"The Julia module Python","title":"Python.pyconvert","text":"pyconvert(T, x) :: T\n\nConvert Python object x to a T.\n\n\n\n\n\n","category":"function"},{"location":"pythonjl/#Python.pyis","page":"The Julia module Python","title":"Python.pyis","text":"pyis(x, y) :: Bool\n\nEquivalent to x is y in Python.\n\n\n\n\n\n","category":"function"},{"location":"pythonjl/#Python.pyrepr","page":"The Julia module Python","title":"Python.pyrepr","text":"pyrepr([T=PyObject,] x) :: T\n\nEquivalent to repr(x) in Python.\n\n\n\n\n\n","category":"function"},{"location":"pythonjl/#Python.pyhasattr","page":"The Julia module Python","title":"Python.pyhasattr","text":"pyhasattr(x, k) :: Bool\n\nEquivalent to hasattr(x, k) in Python, returned as a Bool.\n\n\n\n\n\n","category":"function"},{"location":"pythonjl/#Python.pygetattr","page":"The Julia module Python","title":"Python.pygetattr","text":"pygetattr([T=PyObject,] x, k) :: T\n\nEquivalent to x.k or getattr(x, k) in Python.\n\n\n\n\n\n","category":"function"},{"location":"pythonjl/#Python.pysetattr","page":"The Julia module Python","title":"Python.pysetattr","text":"pysetattr(x, k, v)\n\nEquivalent to x.k = v or setattr(x, k, v) in Python, but returns x.\n\n\n\n\n\n","category":"function"},{"location":"pythonjl/#Python.pydir","page":"The Julia module Python","title":"Python.pydir","text":"pydir([T=PyObject,] x) :: T\n\nEquivalent to dir(x) in Python.\n\n\n\n\n\n","category":"function"},{"location":"pythonjl/#Python.pycall","page":"The Julia module Python","title":"Python.pycall","text":"pycall([T=PyObject,] f, args...; kwargs...) :: T\n\nEquivalent to f(*args, **kwargs) in Python.\n\n\n\n\n\n","category":"function"},{"location":"pythonjl/#Python.pylen","page":"The Julia module Python","title":"Python.pylen","text":"pylen(x) :: Integer\n\nEquivalent to len(x) in Python.\n\n\n\n\n\n","category":"function"},{"location":"pythonjl/#Python.pycontains","page":"The Julia module Python","title":"Python.pycontains","text":"pycontains(x, v) :: Bool\n\nEquivalent to v in x in Python.\n\n\n\n\n\n","category":"function"},{"location":"pythonjl/#Python.pyin","page":"The Julia module Python","title":"Python.pyin","text":"pyin(v, x) :: Bool\n\nEquivalent to v in x in Python.\n\n\n\n\n\n","category":"function"},{"location":"pythonjl/#Python.pygetitem","page":"The Julia module Python","title":"Python.pygetitem","text":"pygetitem([T=PyObject,] x, k) :: T\n\nEquivalent to x[k] or getitem(x, k) in Python.\n\n\n\n\n\n","category":"function"},{"location":"pythonjl/#Python.pysetitem","page":"The Julia module Python","title":"Python.pysetitem","text":"pysetitem(x, k, v)\n\nEquivalent to x[k] = v or setitem(x, k, v) in Python, but returns x.\n\n\n\n\n\n","category":"function"},{"location":"pythonjl/#Python.pydelitem","page":"The Julia module Python","title":"Python.pydelitem","text":"pydelitem(x, k)\n\nEquivalent to del x[k] or delitem(x, k) in Python, but returns x.\n\n\n\n\n\n","category":"function"},{"location":"pythonjl/#Python.pyimport","page":"The Julia module Python","title":"Python.pyimport","text":"pyimport([T=PyObject,] name) :: T\npyimport([T=PyObject,] name=>attr) :: T\npyimport([T=PyObject,] name=>(attr,...)) :: Tuple{T,...}\n\nImports and returns the Python module name.\n\nIf additionally attr is given, the given attribute of the module is returned instead. It may also be a tuple of attributes.\n\nIf several arguments are given, each one is imported and a tuple is returned.\n\n\n\n\n\n","category":"function"},{"location":"pythonjl/#Python.pytruth","page":"The Julia module Python","title":"Python.pytruth","text":"pytruth(x) :: Bool\n\nThe truthyness of x, equivalent to bool(x) or not not x in Python, or to pybool(Bool, x).\n\n\n\n\n\n","category":"function"},{"location":"pythonjl/#Python.pyissubclass","page":"The Julia module Python","title":"Python.pyissubclass","text":"pyissubclass(x, y) :: Bool\n\nEquivalent to issubclass(x, y) in Python.\n\n\n\n\n\n","category":"function"},{"location":"pythonjl/#Python.pyisinstance","page":"The Julia module Python","title":"Python.pyisinstance","text":"pyisinstance(x, y) :: Bool\n\nEquivalent to isinstance(x, y) in Python.\n\n\n\n\n\n","category":"function"},{"location":"pythonjl/#Python.pyhash","page":"The Julia module Python","title":"Python.pyhash","text":"pyhash(x) :: Integer\n\nEquivalent to hash(x) in Python.\n\n\n\n\n\n","category":"function"},{"location":"pythonjl/#Python.pyiter","page":"The Julia module Python","title":"Python.pyiter","text":"pyiter([T=PyObject] x) :: T\n\nEquivalent to iter(x) in Python.\n\n\n\n\n\n","category":"function"},{"location":"pythonjl/#Python.pywith","page":"The Julia module Python","title":"Python.pywith","text":"pywith(f, o, d=nothing)\n\nEquivalent to with o as x: f(x) in Python, where x is a PyObject.\n\nOn success, the value of f(x) is returned. If an exception occurs but is suppressed then d is returned.\n\n\n\n\n\n","category":"function"},{"location":"pythonjl/#Numbers","page":"The Julia module Python","title":"Numbers","text":"","category":"section"},{"location":"pythonjl/","page":"The Julia module Python","title":"The Julia module Python","text":"pyeq\npyne\npyle\npylt\npyge\npygt\npyadd\npyiadd\npysub\npyisub\npymul\npyimul\npymatmul\npyimatmul\npyfloordiv\npyifloordiv\npytruediv\npyitruediv\npymod\npyimod\npydivmod\npylshift\npyilshift\npyrshift\npyirshift\npyand\npyiand\npyor\npyior\npyxor\npyixor\npypow\npyipow\npyneg\npypos\npyabs\npyinv","category":"page"},{"location":"pythonjl/#Python.pyeq","page":"The Julia module Python","title":"Python.pyeq","text":"pyeq([T=PyObject,] x, y) :: T\n\nEquivalent to x == y in Python.\n\n\n\n\n\n","category":"function"},{"location":"pythonjl/#Python.pyne","page":"The Julia module Python","title":"Python.pyne","text":"pyne([T=PyObject,] x, y) :: T\n\nEquivalent to x != y in Python.\n\n\n\n\n\n","category":"function"},{"location":"pythonjl/#Python.pyle","page":"The Julia module Python","title":"Python.pyle","text":"pyle([T=PyObject,] x, y) :: T\n\nEquivalent to x <= y in Python.\n\n\n\n\n\n","category":"function"},{"location":"pythonjl/#Python.pylt","page":"The Julia module Python","title":"Python.pylt","text":"pylt([T=PyObject,] x, y) :: T\n\nEquivalent to x < y in Python.\n\n\n\n\n\n","category":"function"},{"location":"pythonjl/#Python.pyge","page":"The Julia module Python","title":"Python.pyge","text":"pyge([T=PyObject,] x, y) :: T\n\nEquivalent to x >= y in Python.\n\n\n\n\n\n","category":"function"},{"location":"pythonjl/#Python.pygt","page":"The Julia module Python","title":"Python.pygt","text":"pygt([T=PyObject,] x, y) :: T\n\nEquivalent to x > y in Python.\n\n\n\n\n\n","category":"function"},{"location":"pythonjl/#Python.pyadd","page":"The Julia module Python","title":"Python.pyadd","text":"pyadd([T=PyObject,] x, y) :: T\n\nEquivalent to x + y in Python.\n\n\n\n\n\n","category":"function"},{"location":"pythonjl/#Python.pyiadd","page":"The Julia module Python","title":"Python.pyiadd","text":"pyiadd([T=typeof(x),] x, y) :: T\n\nx = pyiadd(x, y) is equivalent to x += y in Python.\n\n\n\n\n\n","category":"function"},{"location":"pythonjl/#Python.pysub","page":"The Julia module Python","title":"Python.pysub","text":"pysub([T=PyObject,] x, y) :: T\n\nEquivalent to x - y in Python.\n\n\n\n\n\n","category":"function"},{"location":"pythonjl/#Python.pyisub","page":"The Julia module Python","title":"Python.pyisub","text":"pyisub([T=typeof(x),] x, y) :: T\n\nx = pyisub(x, y) is equivalent to x -= y in Python.\n\n\n\n\n\n","category":"function"},{"location":"pythonjl/#Python.pymul","page":"The Julia module Python","title":"Python.pymul","text":"pymul([T=PyObject,] x, y) :: T\n\nEquivalent to x * y in Python.\n\n\n\n\n\n","category":"function"},{"location":"pythonjl/#Python.pyimul","page":"The Julia module Python","title":"Python.pyimul","text":"pyimul([T=typeof(x),] x, y) :: T\n\nx = pyimul(x, y) is equivalent to x *= y in Python.\n\n\n\n\n\n","category":"function"},{"location":"pythonjl/#Python.pymatmul","page":"The Julia module Python","title":"Python.pymatmul","text":"pymatmul([T=PyObject,] x, y) :: T\n\nEquivalent to x @ y in Python.\n\n\n\n\n\n","category":"function"},{"location":"pythonjl/#Python.pyimatmul","page":"The Julia module Python","title":"Python.pyimatmul","text":"pyimatmul([T=typeof(x),] x, y) :: T\n\nx = pyimatmul(x, y) is equivalent to x @= y in Python.\n\n\n\n\n\n","category":"function"},{"location":"pythonjl/#Python.pyfloordiv","page":"The Julia module Python","title":"Python.pyfloordiv","text":"pyfloordiv([T=PyObject,] x, y) :: T\n\nEquivalent to x // y in Python.\n\n\n\n\n\n","category":"function"},{"location":"pythonjl/#Python.pyifloordiv","page":"The Julia module Python","title":"Python.pyifloordiv","text":"pyifloordiv([T=typeof(x),] x, y) :: T\n\nx = pyifloordiv(x, y) is equivalent to x //= y in Python.\n\n\n\n\n\n","category":"function"},{"location":"pythonjl/#Python.pytruediv","page":"The Julia module Python","title":"Python.pytruediv","text":"pytruediv([T=PyObject,] x, y) :: T\n\nEquivalent to x / y in Python.\n\n\n\n\n\n","category":"function"},{"location":"pythonjl/#Python.pyitruediv","page":"The Julia module Python","title":"Python.pyitruediv","text":"pyitruediv([T=typeof(x),] x, y) :: T\n\nx = pyitruediv(x, y) is equivalent to x /= y in Python.\n\n\n\n\n\n","category":"function"},{"location":"pythonjl/#Python.pymod","page":"The Julia module Python","title":"Python.pymod","text":"pymod([T=PyObject,] x, y) :: T\n\nEquivalent to x % y in Python.\n\n\n\n\n\n","category":"function"},{"location":"pythonjl/#Python.pyimod","page":"The Julia module Python","title":"Python.pyimod","text":"pyimod([T=typeof(x),] x, y) :: T\n\nx = pyimod(x, y) is equivalent to x %= y in Python.\n\n\n\n\n\n","category":"function"},{"location":"pythonjl/#Python.pydivmod","page":"The Julia module Python","title":"Python.pydivmod","text":"pydivmod([T=PyObject,] x, y) :: T\n\nEquivalent to divmod(x, y) in Python.\n\n\n\n\n\n","category":"function"},{"location":"pythonjl/#Python.pylshift","page":"The Julia module Python","title":"Python.pylshift","text":"pylshift([T=PyObject,] x, y) :: T\n\nEquivalent to x << y in Python.\n\n\n\n\n\n","category":"function"},{"location":"pythonjl/#Python.pyilshift","page":"The Julia module Python","title":"Python.pyilshift","text":"pyilshift([T=typeof(x),] x, y) :: T\n\nx = pyilshift(x, y) is equivalent to x <<= y in Python.\n\n\n\n\n\n","category":"function"},{"location":"pythonjl/#Python.pyrshift","page":"The Julia module Python","title":"Python.pyrshift","text":"pyrshift([T=PyObject,] x, y) :: T\n\nEquivalent to x >> y in Python.\n\n\n\n\n\n","category":"function"},{"location":"pythonjl/#Python.pyirshift","page":"The Julia module Python","title":"Python.pyirshift","text":"pyirshift([T=typeof(x),] x, y) :: T\n\nx = pyirshift(x, y) is equivalent to x >>= y in Python.\n\n\n\n\n\n","category":"function"},{"location":"pythonjl/#Python.pyand","page":"The Julia module Python","title":"Python.pyand","text":"pyand([T=PyObject,] x, y) :: T\n\nEquivalent to x & y in Python.\n\n\n\n\n\n","category":"function"},{"location":"pythonjl/#Python.pyiand","page":"The Julia module Python","title":"Python.pyiand","text":"pyiand([T=typeof(x),] x, y) :: T\n\nx = pyiand(x, y) is equivalent to x &= y in Python.\n\n\n\n\n\n","category":"function"},{"location":"pythonjl/#Python.pyor","page":"The Julia module Python","title":"Python.pyor","text":"pyor([T=PyObject,] x, y) :: T\n\nEquivalent to x | y in Python.\n\n\n\n\n\n","category":"function"},{"location":"pythonjl/#Python.pyior","page":"The Julia module Python","title":"Python.pyior","text":"pyior([T=typeof(x),] x, y) :: T\n\nx = pyior(x, y) is equivalent to x |= y in Python.\n\n\n\n\n\n","category":"function"},{"location":"pythonjl/#Python.pyxor","page":"The Julia module Python","title":"Python.pyxor","text":"pyxor([T=PyObject,] x, y) :: T\n\nEquivalent to x ^ y in Python.\n\n\n\n\n\n","category":"function"},{"location":"pythonjl/#Python.pyixor","page":"The Julia module Python","title":"Python.pyixor","text":"pyixor([T=typeof(x),] x, y) :: T\n\nx = pyixor(x, y) is equivalent to x ^= y in Python.\n\n\n\n\n\n","category":"function"},{"location":"pythonjl/#Python.pypow","page":"The Julia module Python","title":"Python.pypow","text":"pypow([T=PyObject,] x, y, [z]) :: T\n\nEquivalent to x**y or pow(x, y, z) in Python.\n\n\n\n\n\n","category":"function"},{"location":"pythonjl/#Python.pyipow","page":"The Julia module Python","title":"Python.pyipow","text":"pyipow([T=typeof(x),] x, y, [z]) :: T\n\nx = pyipow(x, y) is equivalent to x **= y in Python.\n\n\n\n\n\n","category":"function"},{"location":"pythonjl/#Python.pyneg","page":"The Julia module Python","title":"Python.pyneg","text":"pyneg([T=typeof(x),] x) :: T\n\nEquivalent to -x in Python.\n\n\n\n\n\n","category":"function"},{"location":"pythonjl/#Python.pypos","page":"The Julia module Python","title":"Python.pypos","text":"pypos([T=typeof(x),] x) :: T\n\nEquivalent to +x in Python.\n\n\n\n\n\n","category":"function"},{"location":"pythonjl/#Python.pyabs","page":"The Julia module Python","title":"Python.pyabs","text":"pyabs([T=typeof(x),] x) :: T\n\nEquivalent to abs(x) in Python.\n\n\n\n\n\n","category":"function"},{"location":"pythonjl/#Python.pyinv","page":"The Julia module Python","title":"Python.pyinv","text":"pyinv([T=typeof(x),] x) :: T\n\nEquivalent to -x in Python.\n\n\n\n\n\n","category":"function"},{"location":"pythonjl/#Wrapper-types","page":"The Julia module Python","title":"Wrapper types","text":"","category":"section"},{"location":"pythonjl/","page":"The Julia module Python","title":"The Julia module Python","text":"PyList\nPySet\nPyDict\nPyIterable\nPyArray\nPyBuffer\nPyIO\nPyPandasDataFrame\nPyCode\n@py_cmd\n@pyv_cmd\nPyInternedString\n@pystr_str\nPyException","category":"page"},{"location":"pythonjl/#Python.PyList","page":"The Julia module Python","title":"Python.PyList","text":"PyList{T=PyObject}([o])\n\nWrap the Python list o (or anything satisfying the sequence interface) as a Julia vector with elements of type T.\n\nIf o is not given, an empty list is created.\n\n\n\n\n\n","category":"type"},{"location":"pythonjl/#Python.PySet","page":"The Julia module Python","title":"Python.PySet","text":"PySet{T=PyObject}([o])\n\nWrap the Python set o (or anything satisfying the set interface) as a Julia set with elements of type T.\n\nIf o is not given, an empty set is created.\n\n\n\n\n\n","category":"type"},{"location":"pythonjl/#Python.PyDict","page":"The Julia module Python","title":"Python.PyDict","text":"PyDict{K=PyObject, V=PyObject}([o])\n\nWrap the Python dictionary o (or anything satisfying the mapping interface) as a Julia dictionary with keys of type K and values of type V.\n\nIf o is not given, an empty dict is created.\n\n\n\n\n\n","category":"type"},{"location":"pythonjl/#Python.PyIterable","page":"The Julia module Python","title":"Python.PyIterable","text":"PyIterable{T=PyObject}(o)\n\nWrap the Python object o into a Julia object which iterates values of type T.\n\n\n\n\n\n","category":"type"},{"location":"pythonjl/#Python.PyArray","page":"The Julia module Python","title":"Python.PyArray","text":"PyArray{T,N,R,M,L}(o)\n\nInterpret the Python array o as a Julia array.\n\nThe input may be anything supporting the buffer protocol or the numpy array interface. This includes bytes, bytearray, array.array, numpy.ndarray, pandas.Series.\n\nAll type parameters are optional:\n\nT is the (Julia) element type.\nN is the number of dimensions.\nR is the type of elements of the underlying buffer (which may be different from T to allow some basic conversion).\nM is true if the array is mutable.\nL is true if the array supports fast linear indexing.\n\n\n\n\n\n","category":"type"},{"location":"pythonjl/#Python.PyBuffer","page":"The Julia module Python","title":"Python.PyBuffer","text":"PyBuffer(o, [flags=C.PyBUF_FULL_RO])\n\nA reference to the underlying buffer of o, if it satisfies the buffer protocol.\n\nHas the following properties:\n\nbuf: Pointer to the data.\nobj: The exporting object (usually o).\nlen: The length of the buffer in bytes.\nreadonly: True if the buffer is immutable.\nitemsize: The size of each element.\nformat: The struct-syntax format of the element type.\nndim: The number of dimensions.\nshape: The length of the buffer in each dimension.\nstrides: The strides (in bytes) of the buffer in each dimension.\nsuboffsets: For indirect arrays. See the buffer protocol documentation.\nisccontiguous: True if the buffer is C-contiguous (e.g. numpy arrays).\nisfcontiguous: True if the buffer is Fortran-contiguous (e.g. Julia arrays).\neltype: The element type.\n\n\n\n\n\n","category":"type"},{"location":"pythonjl/#Python.PyIO","page":"The Julia module Python","title":"Python.PyIO","text":"PyIO(o; own=false, text=missing, buflen=4096)\n\nWrap the Python byte-based IO stream o as a Julia IO stream.\n\nWhen this goes out of scope and is finalized, it is automatically flushed. If own=true then it is also closed.\n\nIf text=false then o must be a binary stream and arbitrary binary I/O is possible. If text=true then o must be a text stream and only UTF-8 must be written (i.e. use print not write). If text is not specified then it is chosen automatically. If o is a text stream and you really need a binary stream, then often PyIO(o.buffer) will work.\n\nFor efficiency, reads and writes are buffered before being sent to o. The size of the buffer is buflen.\n\n\n\n\n\n","category":"type"},{"location":"pythonjl/#Python.PyPandasDataFrame","page":"The Julia module Python","title":"Python.PyPandasDataFrame","text":"PyPandasDataFrame(o; indexname=:index, columntypes=(), copy=false)\n\nWrap the Pandas dataframe o as a Julia table.\n\nThis object satisfies the Tables.jl and TableTraits.jl interfaces.\n\n:indexname is the name of the index column when converting this to a table, and may be nothing to exclude the index.\n:columntypes is an iterable of columnname=>type or [columnnames...]=>type pairs, used when converting to a table.\n:copy is true to copy columns on conversion.\n\n\n\n\n\n","category":"type"},{"location":"pythonjl/#Python.PyCode","page":"The Julia module Python","title":"Python.PyCode","text":"PyCode(code::String, filename::String, mode::Symbol)\n\nA Python code object, representing the compiled contents of code.\n\nThe filename is used for exception printing. The mode must be :exec or :eval.\n\nSee also @py_cmd and @pyv_cmd.\n\n\n\n\n\n","category":"type"},{"location":"pythonjl/#Python.@py_cmd","page":"The Julia module Python","title":"Python.@py_cmd","text":"py`...` :: PyCode\n\nLiteral syntax for a compiled PyCode object in \"exec\" mode.\n\nSuitable for passing to Python's exec function.\n\n\n\n\n\n","category":"macro"},{"location":"pythonjl/#Python.@pyv_cmd","page":"The Julia module Python","title":"Python.@pyv_cmd","text":"pyv`...` :: PyCode\n\nLiteral syntax for a compiled PyCode object in \"eval\" mode.\n\nSuitable for passing to Python's eval function.\n\n\n\n\n\n","category":"macro"},{"location":"pythonjl/#Python.PyInternedString","page":"The Julia module Python","title":"Python.PyInternedString","text":"PyInternedString(x::String)\n\nConvert x to an interned Python string.\n\nThis can provide a performance boost when using strings to index dictionaries or get attributes.\n\nSee also [@pystr_str].\n\n\n\n\n\n","category":"type"},{"location":"pythonjl/#Python.@pystr_str","page":"The Julia module Python","title":"Python.@pystr_str","text":"pystr\"...\" :: PyInternedString\n\nLiteral syntax for an interned Python string.\n\n\n\n\n\n","category":"macro"},{"location":"pythonjl/#Python.PyException","page":"The Julia module Python","title":"Python.PyException","text":"PyException <: Exception\n\nRepresents an exception raised from Python.\n\nIt has three fields tref, vref, bref which are all PyRefs, and are the type, value and backtrace of the exception.\n\n\n\n\n\n","category":"type"}]
}
