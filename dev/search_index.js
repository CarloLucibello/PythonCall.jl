var documenterSearchIndex = {"docs":
[{"location":"getting-started/#Getting-Started","page":"Getting Started","title":"Getting Started","text":"","category":"section"},{"location":"getting-started/#You-will-need","page":"Getting Started","title":"You will need","text":"","category":"section"},{"location":"getting-started/","page":"Getting Started","title":"Getting Started","text":"Julia 1.0 or higher.\nPython 3.5 or higher.","category":"page"},{"location":"getting-started/#Install-the-Julia-package","page":"Getting Started","title":"Install the Julia package","text":"","category":"section"},{"location":"getting-started/","page":"Getting Started","title":"Getting Started","text":"using Pkg\npkg\"add https://github.com/cjdoris/Python.jl\"","category":"page"},{"location":"getting-started/#Install-the-Python-package-(optional)","page":"Getting Started","title":"Install the Python package (optional)","text":"","category":"section"},{"location":"getting-started/","page":"Getting Started","title":"Getting Started","text":"This step is only required if you wish to call Julia from Python.","category":"page"},{"location":"getting-started/","page":"Getting Started","title":"Getting Started","text":"Currently the Python package is shipped with the source of the Julia package, and must be pip-installed manually. The following should work in most shells (including PowerShell):","category":"page"},{"location":"getting-started/","page":"Getting Started","title":"Getting Started","text":"pip install --upgrade $(julia -e \"using Python; print(Python.juliapypath)\")","category":"page"},{"location":"getting-started/","page":"Getting Started","title":"Getting Started","text":"Note that this is a very small \"bootstrap\" package whose sole job is to locate and load Julia; the main functionality is in the main Julia package. Hence it is not necessary to upgrage the Python package every time you upgrade the Julia one.","category":"page"},{"location":"getting-started/#Environment-variables","page":"Getting Started","title":"Environment variables","text":"","category":"section"},{"location":"getting-started/","page":"Getting Started","title":"Getting Started","text":"If Julia and Python are in your PATH, then no further set-up is required. Otherwise, the following environment variables control how the package finds these.","category":"page"},{"location":"getting-started/","page":"Getting Started","title":"Getting Started","text":"PYTHONJL_EXE: Path to the Python executable. Or the special value CONDA which uses Python from the default conda environment, or CONDA:{env} to use the given environment.\nPYTHONJL_LIB: Path to the Python library. Normally this is inferred from the Python executable, but can be over-ridden.\nJULIAPY_EXE: Path to the Julia executable.\nJULIAPY_LIB: Path to the Julia library. Normally this is inferred from the Julia executable, but can be over-ridden.","category":"page"},{"location":"juliapy/#Julia-from-Python","page":"Julia from Python","title":"Julia from Python","text":"","category":"section"},{"location":"juliapy/#Wrapper-types","page":"Julia from Python","title":"Wrapper types","text":"","category":"section"},{"location":"juliapy/","page":"Julia from Python","title":"Julia from Python","text":"Apart from a few fundamental immutable types (see here), all Julia values are by default converted into Python to some julia.AnyValue object, which wraps the original value. Some types are converted to a subclass of julia.AnyValue which provides additional Python semantics â€“- e.g. Julia vectors are interpreted as Python sequences.","category":"page"},{"location":"juliapy/","page":"Julia from Python","title":"Julia from Python","text":"There is also a julia.RawValue object, which gives a stricter \"Julia-only\" interface, documented below. These types all inherit from julia.ValueBase.","category":"page"},{"location":"juliapy/#julia.AnyValue","page":"Julia from Python","title":"julia.AnyValue","text":"","category":"section"},{"location":"juliapy/#Members","page":"Julia from Python","title":"Members","text":"","category":"section"},{"location":"juliapy/","page":"Julia from Python","title":"Julia from Python","text":"__jl_raw(): Convert to a julia.RawValue. (See also pyjlraw.)","category":"page"},{"location":"juliapy/#julia.NumberValue","page":"Julia from Python","title":"julia.NumberValue","text":"","category":"section"},{"location":"juliapy/","page":"Julia from Python","title":"Julia from Python","text":"This wraps any Julia Number value. It is a subclass of numbers.Number and behaves similar to other Python numbers.","category":"page"},{"location":"juliapy/","page":"Julia from Python","title":"Julia from Python","text":"There are also subtypes julia.ComplexValue, julia.RealValue, julia.RationalValue and julia.IntegerValue, which wrap values of the corresponding Julia types, and are subclasses of the corresponding numbers ABC.","category":"page"},{"location":"juliapy/#julia.ArrayValue","page":"Julia from Python","title":"julia.ArrayValue","text":"","category":"section"},{"location":"juliapy/","page":"Julia from Python","title":"Julia from Python","text":"This wraps any Julia AbstractArray value. It is a subclass of collections.abc.Collection.","category":"page"},{"location":"juliapy/","page":"Julia from Python","title":"Julia from Python","text":"It supports zero-up indexing, and can be indexed with integers or slices. Slicing returns a view of the original array.","category":"page"},{"location":"juliapy/","page":"Julia from Python","title":"Julia from Python","text":"There is also the subtype julia.VectorValue which wraps any AbstractVector. It is a subclass of collections.abc.Sequence and behaves similar to a Python list.","category":"page"},{"location":"juliapy/","page":"Julia from Python","title":"Julia from Python","text":"If the array is strided and its eltype is supported (i.e. it is a Bool, IntXX, UIntXX, FloatXX, Complex{FloatXX}, Ptr{Cvoid} or tuple or named tuple of these) then it supports the buffer protocol and the numpy array interface. This means that numpy.asarray(this) will yield a view of the original array, so mutations are visible on the original.","category":"page"},{"location":"juliapy/","page":"Julia from Python","title":"Julia from Python","text":"Otherwise, the numpy __array__ method is supported, and this returns an array of Python objects converted from the contents of the array. In this case, numpy.asarray(this) is a copy of the original array.","category":"page"},{"location":"juliapy/#Members-2","page":"Julia from Python","title":"Members","text":"","category":"section"},{"location":"juliapy/","page":"Julia from Python","title":"Julia from Python","text":"ndim: the number of dimensions.\nshape: tuple of lengths in each dimension.\ncopy(): return a copy of the array.\nreshape(shape): a reshaped view of the array.","category":"page"},{"location":"juliapy/#julia.DictValue","page":"Julia from Python","title":"julia.DictValue","text":"","category":"section"},{"location":"juliapy/","page":"Julia from Python","title":"Julia from Python","text":"This wraps any Julia AbstractDict value. It is a subclass of collections.abc.Mapping and behaves similar to a Python dict.","category":"page"},{"location":"juliapy/#julia.SetValue","page":"Julia from Python","title":"julia.SetValue","text":"","category":"section"},{"location":"juliapy/","page":"Julia from Python","title":"Julia from Python","text":"This wraps any Julia AbstractSet value. It is a subclass of collections.abc.Set and behaves similar to a Python set.","category":"page"},{"location":"juliapy/#julia.IOValue","page":"Julia from Python","title":"julia.IOValue","text":"","category":"section"},{"location":"juliapy/","page":"Julia from Python","title":"Julia from Python","text":"This wraps any Julia IO value. It is a subclass of io.IOBase.","category":"page"},{"location":"juliapy/","page":"Julia from Python","title":"Julia from Python","text":"There are also subtypes julia.RawIOValue, julia.BufferedIOValue and julia.TextIOValue, which are subclasses of io.RawIOBase (unbuffered bytes), io.BufferedIOBase (buffered bytes) and io.TextIOBase (text).","category":"page"},{"location":"juliapy/#Members-3","page":"Julia from Python","title":"Members","text":"","category":"section"},{"location":"juliapy/","page":"Julia from Python","title":"Julia from Python","text":"torawio(): Convert to a julia.RawIOValue, an un-buffered file-like object. (See also pyrawio.)\ntobufferedio(): Convert to a julia.BufferedIOValue, a byte-based file-like object. Julia IO objects are converted to this by default. (See also pybufferedio.)\ntotextio(): Convert to a julia.TextIOValue, a text-based file-like object. (See also pytextio.)","category":"page"},{"location":"juliapy/#julia.ModuleValue","page":"Julia from Python","title":"julia.ModuleValue","text":"","category":"section"},{"location":"juliapy/","page":"Julia from Python","title":"Julia from Python","text":"This wraps any Julia Module value.","category":"page"},{"location":"juliapy/","page":"Julia from Python","title":"Julia from Python","text":"It is the same as julia.AnyValue except for one additional convenience method:","category":"page"},{"location":"juliapy/","page":"Julia from Python","title":"Julia from Python","text":"seval([module=self], code): Evaluates the given code (a string) in the given module.","category":"page"},{"location":"juliapy/#julia.TypeValue","page":"Julia from Python","title":"julia.TypeValue","text":"","category":"section"},{"location":"juliapy/","page":"Julia from Python","title":"Julia from Python","text":"This wraps any Julia Type value.","category":"page"},{"location":"juliapy/","page":"Julia from Python","title":"Julia from Python","text":"It is the same as julia.AnyValue except that indexing is used to access Julia's \"curly\" syntax for specifying parametric types:","category":"page"},{"location":"juliapy/","page":"Julia from Python","title":"Julia from Python","text":"from julia import Main as jl\njl.Vector[jl.Int]() # equivalent to Vector{Int}() in Julia","category":"page"},{"location":"juliapy/#julia.RawValue","page":"Julia from Python","title":"julia.RawValue","text":"","category":"section"},{"location":"juliapy/","page":"Julia from Python","title":"Julia from Python","text":"This can wrap any Julia value.","category":"page"},{"location":"juliapy/#Members-4","page":"Julia from Python","title":"Members","text":"","category":"section"},{"location":"juliapy/","page":"Julia from Python","title":"Julia from Python","text":"__jl_any(): Convert to a julia.AnyValue (or subclass). (See also pyjl.)","category":"page"},{"location":"conversion/#Conversion-Rules","page":"Conversion Rules","title":"Conversion Rules","text":"","category":"section"},{"location":"conversion/#Julia-to-Python","page":"Conversion Rules","title":"Julia to Python","text":"","category":"section"},{"location":"conversion/","page":"Conversion Rules","title":"Conversion Rules","text":"When a Julia object is converted to a Python one (e.g. by calling PyObject, by interpolating it into a @py command, or passing it as an argument to a Python function) the following rules are used by default.","category":"page"},{"location":"conversion/","page":"Conversion Rules","title":"Conversion Rules","text":"The user can always explicitly choose a different conversion (e.g. by calling pylist or pydict).","category":"page"},{"location":"conversion/","page":"Conversion Rules","title":"Conversion Rules","text":"From To\nAny Python object type (PyObject, PyList, etc.) itself\nNothing, Missing None\nBool bool\nStandard integer (IntXX, UIntXX, BigInt) int\nStandard rational (Rational{T}, T a standard integer) fractions.Fraction\nStandard float (FloatXX) float\nStandard complex (Complex{T}, T a standard float) complex\nStandard string/char (String and SubString{String}, Char) str\nTuple tuple\nStandard integer range (AbstractRange{T}, T a standard integer) range\nDate, Time, DateTime (from Dates) date, time, datetime (from datetime)\nSecond, Millisecond, Microsecond, Nanosecond (from Dates) timedelta (from datetime)\nNumber julia.NumberValue, julia.ComplexValue, etc.\nAbstractArray julia.ArrayValue, julia.VectorValue\nAbstractDict julia.DictValue\nAbstractSet julia.SetValue\nIO julia.BufferedIOValue\nModule julia.ModuleValue\nType julia.TypeValue\nAnything else julia.AnyValue","category":"page"},{"location":"conversion/","page":"Conversion Rules","title":"Conversion Rules","text":"The julia.*Value types are all subtypes of julia.AnyValue. They wrap a Julia value, providing access to Julia semantics: it can be called, indexed, and so on. Subtypes add additional Pythonic semantics. Read more here.","category":"page"},{"location":"conversion/","page":"Conversion Rules","title":"Conversion Rules","text":"This conversion policy is defined/implemented by Python.C.PyObject_From.","category":"page"},{"location":"conversion/#Python-to-Julia","page":"Conversion Rules","title":"Python to Julia","text":"","category":"section"},{"location":"conversion/","page":"Conversion Rules","title":"Conversion Rules","text":"From Julia, one can convert Python objects to a desired type using pyconvert(T, x) for example, or @pyv `...`::T.","category":"page"},{"location":"conversion/","page":"Conversion Rules","title":"Conversion Rules","text":"From Python, when a value is passed to Julia, it is typically converted to a corresponding Julia value using pyconvert(Any, x).","category":"page"},{"location":"conversion/","page":"Conversion Rules","title":"Conversion Rules","text":"The following table specifies the conversion rules in place. If the initial Python type matches the \"from\" column and the desired type T intersects with the \"To\" column, then that conversion is attempted. Conversions are tried in priority order, then in specificity order.","category":"page"},{"location":"conversion/","page":"Conversion Rules","title":"Conversion Rules","text":"From To\nTop priority (wrapped values). \njulia.AnyValue Any\nVery high priority (arrays). \nObjects satisfying the buffer or array interface PyArray\nHigh priority (canonical conversions). \n... todo ... \nStandard priority (other reasonable conversions). \n... todo ... \nLow priority (fallback to PyObject). \nAnything PyObject\nBottom priority (must be explicitly specified by excluding PyObject). \nObjects satisfying the buffer interface PyBuffer\nAnything PyRef","category":"page"},{"location":"conversion/","page":"Conversion Rules","title":"Conversion Rules","text":"Note that as with conversion from Julia to Python, by default only immutable objects are converted to a Julia equivalent, everything else is wrapped.","category":"page"},{"location":"#Python.jl","page":"Home","title":"Python.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Bringing Python and Julia together in seamless harmony:","category":"page"},{"location":"","page":"Home","title":"Home","text":"Call Python code from Julia and Julia code from Python via a symmetric interface.\nSimple syntax, so the Python code looks like Python and the Julia code looks like Julia.\nIntuitive and flexible conversions between Julia and Python: anything can be converted, you are in control.\nFast non-copying conversion of numeric arrays in either direction: modify Python arrays (e.g. bytes, array.array, numpy.ndarray) from Julia or Julia arrays from Python.\nHelpful wrappers: interpret Python sequences, dictionaries, arrays, dataframes and IO streams as their Julia couterparts, and vice versa.\nBeautiful stack-traces.\nWorks anywhere: tested on Windows, MacOS and Linux, 32- and 64-bit, Julia 1.0 upwards and Python 3.5 upwards.","category":"page"},{"location":"pythonjl/#Python-from-Julia","page":"Python from Julia","title":"Python from Julia","text":"","category":"section"},{"location":"pythonjl/#Execute-Python-code","page":"Python from Julia","title":"Execute Python code","text":"","category":"section"},{"location":"pythonjl/","page":"Python from Julia","title":"Python from Julia","text":"@py\n@pyv\n@pyg\n@pya\n@pyr","category":"page"},{"location":"pythonjl/#Python.@py","page":"Python from Julia","title":"Python.@py","text":"@py `...` [locals] [var=val, ...]\n\nExecutes the given Python code.\n\nJulia values can be interpolated using the usual $(...) syntax.\n\nAdditionally, assignment to interpolations is supported: e.g. $(x::T) = ... will convert the right hand side to a T and assign it to x.\n\nCurrently only single assignment is supported. Multiple assignment ($x, $y = ...) or mutating assignment ($x += ...) will not be recognized.\nWhat actually happens is that the assignment is to a temporary Python variable, which is then read when execution successfully finishes. Hence if an exception occurs, no assignments will happen.\n\nThe globals are pyglobals. The locals are locals, if given, otherwise a temporary scope is created. Extra values to be interted into the scope can be given with extra var=val arguments.\n\n\n\n\n\n","category":"macro"},{"location":"pythonjl/#Python.@pyv","page":"Python from Julia","title":"Python.@pyv","text":"@pyv `...`[::rettype] [locals] [var=val, ...]\n\nEvaluate the given Python code.\n\nJulia values can be interpolated using the usual $(...) syntax.\n\nThe globals are pyglobals. The locals are locals, if given, otherwise a temporary scope is created. Extra values to be interted into the scope can be given with extra var=val arguments.\n\nThe result is converted to a rettype, which defaults to PyObject.\n\n\n\n\n\n","category":"macro"},{"location":"pythonjl/#Python.@pyg","page":"Python from Julia","title":"Python.@pyg","text":"@pyg `...` [var=val, ...]\n\nExecutes the given Python code in the global scope.\n\nThis is simply shorthand for @py `...` pyglobals (see @py).\n\n\n\n\n\n","category":"macro"},{"location":"pythonjl/#Python.@pya","page":"Python from Julia","title":"Python.@pya","text":"@pya `...`[::rettype] [locals] [var=val, ...]\n\nExecute the given Python code and return ans.\n\nThis is the same as @py ... except that the variable ans is extracted from the scope and returned.\n\n\n\n\n\n","category":"macro"},{"location":"pythonjl/#Python.@pyr","page":"Python from Julia","title":"Python.@pyr","text":"@pyr `...`[::rettype] [locals] [var=val, ...]\n\nExecute the given Python code in a function and return its return value.\n\nEssentially equivalent to @pya `def result(): ...; ans = result()`.\n\n\n\n\n\n","category":"macro"},{"location":"pythonjl/#PyObjects","page":"Python from Julia","title":"PyObjects","text":"","category":"section"},{"location":"pythonjl/#Python-functions","page":"Python from Julia","title":"Python functions","text":"","category":"section"},{"location":"pythonjl/#Construct-Python-objects","page":"Python from Julia","title":"Construct Python objects","text":"","category":"section"},{"location":"pythonjl/","page":"Python from Julia","title":"Python from Julia","text":"pynone\npybool\npyint\npyfloat\npystr\npybytes\npytuple\npylist\npycollist\npyrowlist\npyset\npyfrozenset\npydict\npyslice\npyellipsis\npynotimplemented\npymethod\npytype","category":"page"},{"location":"pythonjl/#Python.pynone","page":"Python from Julia","title":"Python.pynone","text":"pynone([T=PyObject]) :: T\n\nEquivalent to None in Python.\n\n\n\n\n\n","category":"function"},{"location":"pythonjl/#Python.pybool","page":"Python from Julia","title":"Python.pybool","text":"pybool([T=PyObject,] ...) :: T\n\nEquivalent to bool(...) in Python.\n\n\n\n\n\n","category":"function"},{"location":"pythonjl/#Python.pyint","page":"Python from Julia","title":"Python.pyint","text":"pyint([T=PyObject,] ...) :: T\n\nEquivalent to int(...) in Python.\n\n\n\n\n\n","category":"function"},{"location":"pythonjl/#Python.pyfloat","page":"Python from Julia","title":"Python.pyfloat","text":"pyfloat([T=PyObject,] ...) :: T\n\nEquivalent to float(...) in Python.\n\n\n\n\n\n","category":"function"},{"location":"pythonjl/#Python.pystr","page":"Python from Julia","title":"Python.pystr","text":"pystr([T=PyObject,] x) :: T\n\nEquivalent to str(x) in Python.\n\n\n\n\n\n","category":"function"},{"location":"pythonjl/#Python.pybytes","page":"Python from Julia","title":"Python.pybytes","text":"pybytes([T=PyObject,] x) :: T\n\nEquivalent to str(x) in Python.\n\n\n\n\n\n","category":"function"},{"location":"pythonjl/#Python.pytuple","page":"Python from Julia","title":"Python.pytuple","text":"pytuple([T=PyObject,] [x]) :: T\n\nCreate a Python tuple from the elements of iterable x.\n\nIf x is a Python object, this is equivalent to tuple(x) in Python.\n\n\n\n\n\n","category":"function"},{"location":"pythonjl/#Python.pylist","page":"Python from Julia","title":"Python.pylist","text":"pylist([T=PyObject,] [x]) :: T\n\nCreate a Python list from the elements of iterable x.\n\nIf x is a Python object, this is equivalent to list(x) in Python.\n\n\n\n\n\n","category":"function"},{"location":"pythonjl/#Python.pycollist","page":"Python from Julia","title":"Python.pycollist","text":"pycollist([T=PyObject,] x::AbstractArray) :: T\n\nCreate a nested Python list-of-lists from the elements of x. For matrices, this is a list of columns.\n\n\n\n\n\n","category":"function"},{"location":"pythonjl/#Python.pyrowlist","page":"Python from Julia","title":"Python.pyrowlist","text":"pyrowlist([T=PyObject,] x::AbstractArray) :: T\n\nCreate a nested Python list-of-lists from the elements of x. For matrices, this is a list of rows.\n\n\n\n\n\n","category":"function"},{"location":"pythonjl/#Python.pyset","page":"Python from Julia","title":"Python.pyset","text":"pyset([T=PyObject,] [x]) :: T\n\nCreate a Python set from the elements of iterable x.\n\nIf x is a Python object, this is equivalent to set(x) in Python.\n\n\n\n\n\n","category":"function"},{"location":"pythonjl/#Python.pyfrozenset","page":"Python from Julia","title":"Python.pyfrozenset","text":"pyfrozenset([T=PyObject,] [x]) :: T\n\nCreate a Python frozenset from the elements of iterable x.\n\nIf x is a Python object, this is equivalent to frozenset(x) in Python.\n\n\n\n\n\n","category":"function"},{"location":"pythonjl/#Python.pydict","page":"Python from Julia","title":"Python.pydict","text":"pydict([T=PyObject,] [x]) :: T\npydict([T=PyObject;] key=value, ...)\n\nCreate a Python dict from the given key-value pairs in x or keyword arguments.\n\nIf x is a Python object, this is equivalent to dict(x) in Python.\n\n\n\n\n\n","category":"function"},{"location":"pythonjl/#Python.pyslice","page":"Python from Julia","title":"Python.pyslice","text":"pyslice([T=PyObject,] [start,] stop, [step]) :: T\n\nEquivalent to slice(start, stop, step) in Python (or start:stop:step while indexing).\n\n\n\n\n\n","category":"function"},{"location":"pythonjl/#Python.pyellipsis","page":"Python from Julia","title":"Python.pyellipsis","text":"pyellipsis([T=PyObject]) :: T\n\nEquivalent to Ellipsis in Python (or ... while indexing).\n\n\n\n\n\n","category":"function"},{"location":"pythonjl/#Python.pynotimplemented","page":"Python from Julia","title":"Python.pynotimplemented","text":"pynotimplemented([T=PyObject]) :: T\n\nEquivalent to NotImplemented in Python.\n\n\n\n\n\n","category":"function"},{"location":"pythonjl/#Python.pymethod","page":"Python from Julia","title":"Python.pymethod","text":"pymethod([T=PyObject,] x) :: T\n\nConvert x to a Python instance method.\n\n\n\n\n\n","category":"function"},{"location":"pythonjl/#Python.pytype","page":"Python from Julia","title":"Python.pytype","text":"pytype([T=PyObject,] x) :: T\n\nEquivalent to type(x) in Python.\n\n\n\n\n\npytype([T=PyObject,] name, bases, dict) :: T\n\nEquivalent to type(name, bases, dict) in Python.\n\n\n\n\n\n","category":"function"},{"location":"pythonjl/#Wrap-Julia-values","page":"Python from Julia","title":"Wrap Julia values","text":"","category":"section"},{"location":"pythonjl/","page":"Python from Julia","title":"Python from Julia","text":"pyjl\npyjlraw\npyisjl\npygetvalue\npytextio\npyrawio\npybufferedio","category":"page"},{"location":"pythonjl/#Python.pyjl","page":"Python from Julia","title":"Python.pyjl","text":"pyjl([T=PyObject,] x)\n\nWrap x as a Python julia.AnyValue (or subclass) object.\n\n\n\n\n\n","category":"function"},{"location":"pythonjl/#Python.pyjlraw","page":"Python from Julia","title":"Python.pyjlraw","text":"pyjlraw([T=PyObject,] x)\n\nWrap x as a Python julia.RawValue object.\n\n\n\n\n\n","category":"function"},{"location":"pythonjl/#Python.pyisjl","page":"Python from Julia","title":"Python.pyisjl","text":"pyisjl(o)\n\nTrue if o is a julia.ValueBase object.\n\n\n\n\n\n","category":"function"},{"location":"pythonjl/#Python.pytextio","page":"Python from Julia","title":"Python.pytextio","text":"pytextio([T=PyObject], io::IO) :: T\n\nConvert io to a Python text IO stream, specifically a julia.TextIOValue.\n\n\n\n\n\n","category":"function"},{"location":"pythonjl/#Python.pyrawio","page":"Python from Julia","title":"Python.pyrawio","text":"pyrawio([T=PyObject], io::IO) :: T\n\nConvert io to a Python raw (unbuffered byte) IO stream, specifically a julia.RawIOValue.\n\n\n\n\n\n","category":"function"},{"location":"pythonjl/#Python.pybufferedio","page":"Python from Julia","title":"Python.pybufferedio","text":"pybufferedio([T=PyObject], io::IO) :: T\n\nConvert io to a Python buffered byte IO stream, specifically a julia.BufferedIOValue.\n\n\n\n\n\n","category":"function"},{"location":"pythonjl/#Python-builtins","page":"Python from Julia","title":"Python builtins","text":"","category":"section"},{"location":"pythonjl/","page":"Python from Julia","title":"Python from Julia","text":"pyconvert\npyis\npyhasattr\npygetattr\npysetattr\npydir\npycall\npylen\npycontains\npyin\npygetitem\npysetitem\npydelitem\npyimport\npytruth\npyissubclass\npyisinstance\npyhash\npyiter\npywith","category":"page"},{"location":"pythonjl/#Python.pyconvert","page":"Python from Julia","title":"Python.pyconvert","text":"pyconvert(T, x) :: T\n\nConvert Python object x to a T.\n\n\n\n\n\n","category":"function"},{"location":"pythonjl/#Python.pyis","page":"Python from Julia","title":"Python.pyis","text":"pyis(x, y) :: Bool\n\nEquivalent to x is y in Python.\n\n\n\n\n\n","category":"function"},{"location":"pythonjl/#Python.pyhasattr","page":"Python from Julia","title":"Python.pyhasattr","text":"pyhasattr(x, k) :: Bool\n\nEquivalent to hasattr(x, k) in Python, returned as a Bool.\n\n\n\n\n\n","category":"function"},{"location":"pythonjl/#Python.pygetattr","page":"Python from Julia","title":"Python.pygetattr","text":"pygetattr([T=PyObject,] x, k) :: T\n\nEquivalent to x.k or getattr(x, k) in Python.\n\n\n\n\n\n","category":"function"},{"location":"pythonjl/#Python.pysetattr","page":"Python from Julia","title":"Python.pysetattr","text":"pysetattr(x, k, v)\n\nEquivalent to x.k = v or setattr(x, k, v) in Python, but returns x.\n\n\n\n\n\n","category":"function"},{"location":"pythonjl/#Python.pydir","page":"Python from Julia","title":"Python.pydir","text":"pydir([T=PyObject,] x) :: T\n\nEquivalent to dir(x) in Python.\n\n\n\n\n\n","category":"function"},{"location":"pythonjl/#Python.pycall","page":"Python from Julia","title":"Python.pycall","text":"pycall([T=PyObject,] f, args...; kwargs...) :: T\n\nEquivalent to f(*args, **kwargs) in Python.\n\n\n\n\n\n","category":"function"},{"location":"pythonjl/#Python.pylen","page":"Python from Julia","title":"Python.pylen","text":"pylen(x) :: Integer\n\nEquivalent to len(x) in Python.\n\n\n\n\n\n","category":"function"},{"location":"pythonjl/#Python.pycontains","page":"Python from Julia","title":"Python.pycontains","text":"pycontains(x, v) :: Bool\n\nEquivalent to v in x in Python.\n\n\n\n\n\n","category":"function"},{"location":"pythonjl/#Python.pyin","page":"Python from Julia","title":"Python.pyin","text":"pyin(v, x) :: Bool\n\nEquivalent to v in x in Python.\n\n\n\n\n\n","category":"function"},{"location":"pythonjl/#Python.pygetitem","page":"Python from Julia","title":"Python.pygetitem","text":"pygetitem([T=PyObject,] x, k) :: T\n\nEquivalent to x[k] or getitem(x, k) in Python.\n\n\n\n\n\n","category":"function"},{"location":"pythonjl/#Python.pysetitem","page":"Python from Julia","title":"Python.pysetitem","text":"pysetitem(x, k, v)\n\nEquivalent to x[k] = v or setitem(x, k, v) in Python, but returns x.\n\n\n\n\n\n","category":"function"},{"location":"pythonjl/#Python.pydelitem","page":"Python from Julia","title":"Python.pydelitem","text":"pydelitem(x, k)\n\nEquivalent to del x[k] or delitem(x, k) in Python, but returns x.\n\n\n\n\n\n","category":"function"},{"location":"pythonjl/#Python.pyimport","page":"Python from Julia","title":"Python.pyimport","text":"pyimport([T=PyObject,] name) :: T\npyimport([T=PyObject,] name=>attr) :: T\npyimport([T=PyObject,] name=>(attr,...)) :: Tuple{T,...}\n\nImports and returns the Python module name.\n\nIf additionally attr is given, the given attribute of the module is returned instead. It may also be a tuple of attributes.\n\nIf several arguments are given, each one is imported and a tuple is returned.\n\n\n\n\n\n","category":"function"},{"location":"pythonjl/#Python.pytruth","page":"Python from Julia","title":"Python.pytruth","text":"pytruth(x) :: Bool\n\nThe truthyness of x, equivalent to bool(x) or not not x in Python, or to pybool(Bool, x).\n\n\n\n\n\n","category":"function"},{"location":"pythonjl/#Python.pyissubclass","page":"Python from Julia","title":"Python.pyissubclass","text":"pyissubclass(x, y) :: Bool\n\nEquivalent to issubclass(x, y) in Python.\n\n\n\n\n\n","category":"function"},{"location":"pythonjl/#Python.pyisinstance","page":"Python from Julia","title":"Python.pyisinstance","text":"pyisinstance(x, y) :: Bool\n\nEquivalent to isinstance(x, y) in Python.\n\n\n\n\n\n","category":"function"},{"location":"pythonjl/#Python.pyhash","page":"Python from Julia","title":"Python.pyhash","text":"pyhash(x) :: Integer\n\nEquivalent to hash(x) in Python.\n\n\n\n\n\n","category":"function"},{"location":"pythonjl/#Python.pyiter","page":"Python from Julia","title":"Python.pyiter","text":"pyiter([T=PyObject] x) :: T\n\nEquivalent to iter(x) in Python.\n\n\n\n\n\n","category":"function"},{"location":"pythonjl/#Python.pywith","page":"Python from Julia","title":"Python.pywith","text":"pywith(f, o, d=nothing)\n\nEquivalent to with o as x: f(x) in Python, where x is a PyObject.\n\nOn success, the value of f(x) is returned. If an exception occurs but is suppressed then d is returned.\n\n\n\n\n\n","category":"function"},{"location":"pythonjl/#Numbers","page":"Python from Julia","title":"Numbers","text":"","category":"section"},{"location":"pythonjl/","page":"Python from Julia","title":"Python from Julia","text":"pyeq\npyle\npylt\npyge\npygt\npyadd\npyiadd\npysub\npyisub\npymul\npyimul\npymatmul\npyimatmul\npyfloordiv\npyifloordiv\npytruediv\npyitruediv\npymod\npyimod\npydivmod\npylshift\npyilshift\npyrshift\npyirshift\npyand\npyiand\npyor\npyior\npyxor\npyixor\npypow\npyipow\npyneg\npypos\npyabs\npyinv","category":"page"},{"location":"pythonjl/#Python.pyeq","page":"Python from Julia","title":"Python.pyeq","text":"pyeq([T=PyObject,] x, y) :: T\n\nEquivalent to x == y in Python.\n\n\n\n\n\n","category":"function"},{"location":"pythonjl/#Python.pyle","page":"Python from Julia","title":"Python.pyle","text":"pyle([T=PyObject,] x, y) :: T\n\nEquivalent to x <= y in Python.\n\n\n\n\n\n","category":"function"},{"location":"pythonjl/#Python.pylt","page":"Python from Julia","title":"Python.pylt","text":"pylt([T=PyObject,] x, y) :: T\n\nEquivalent to x < y in Python.\n\n\n\n\n\n","category":"function"},{"location":"pythonjl/#Python.pyge","page":"Python from Julia","title":"Python.pyge","text":"pyge([T=PyObject,] x, y) :: T\n\nEquivalent to x >= y in Python.\n\n\n\n\n\n","category":"function"},{"location":"pythonjl/#Python.pygt","page":"Python from Julia","title":"Python.pygt","text":"pygt([T=PyObject,] x, y) :: T\n\nEquivalent to x > y in Python.\n\n\n\n\n\n","category":"function"},{"location":"pythonjl/#Python.pyadd","page":"Python from Julia","title":"Python.pyadd","text":"pyadd([T=PyObject,] x, y) :: T\n\nEquivalent to x + y in Python.\n\n\n\n\n\n","category":"function"},{"location":"pythonjl/#Python.pyiadd","page":"Python from Julia","title":"Python.pyiadd","text":"pyiadd([T=typeof(x),] x, y) :: T\n\nx = pyiadd(x, y) is equivalent to x += y in Python.\n\n\n\n\n\n","category":"function"},{"location":"pythonjl/#Python.pysub","page":"Python from Julia","title":"Python.pysub","text":"pysub([T=PyObject,] x, y) :: T\n\nEquivalent to x - y in Python.\n\n\n\n\n\n","category":"function"},{"location":"pythonjl/#Python.pyisub","page":"Python from Julia","title":"Python.pyisub","text":"pyisub([T=typeof(x),] x, y) :: T\n\nx = pyisub(x, y) is equivalent to x -= y in Python.\n\n\n\n\n\n","category":"function"},{"location":"pythonjl/#Python.pymul","page":"Python from Julia","title":"Python.pymul","text":"pymul([T=PyObject,] x, y) :: T\n\nEquivalent to x * y in Python.\n\n\n\n\n\n","category":"function"},{"location":"pythonjl/#Python.pyimul","page":"Python from Julia","title":"Python.pyimul","text":"pyimul([T=typeof(x),] x, y) :: T\n\nx = pyimul(x, y) is equivalent to x *= y in Python.\n\n\n\n\n\n","category":"function"},{"location":"pythonjl/#Python.pymatmul","page":"Python from Julia","title":"Python.pymatmul","text":"pymatmul([T=PyObject,] x, y) :: T\n\nEquivalent to x @ y in Python.\n\n\n\n\n\n","category":"function"},{"location":"pythonjl/#Python.pyimatmul","page":"Python from Julia","title":"Python.pyimatmul","text":"pyimatmul([T=typeof(x),] x, y) :: T\n\nx = pyimatmul(x, y) is equivalent to x @= y in Python.\n\n\n\n\n\n","category":"function"},{"location":"pythonjl/#Python.pyfloordiv","page":"Python from Julia","title":"Python.pyfloordiv","text":"pyfloordiv([T=PyObject,] x, y) :: T\n\nEquivalent to x // y in Python.\n\n\n\n\n\n","category":"function"},{"location":"pythonjl/#Python.pyifloordiv","page":"Python from Julia","title":"Python.pyifloordiv","text":"pyifloordiv([T=typeof(x),] x, y) :: T\n\nx = pyifloordiv(x, y) is equivalent to x //= y in Python.\n\n\n\n\n\n","category":"function"},{"location":"pythonjl/#Python.pytruediv","page":"Python from Julia","title":"Python.pytruediv","text":"pytruediv([T=PyObject,] x, y) :: T\n\nEquivalent to x / y in Python.\n\n\n\n\n\n","category":"function"},{"location":"pythonjl/#Python.pyitruediv","page":"Python from Julia","title":"Python.pyitruediv","text":"pyitruediv([T=typeof(x),] x, y) :: T\n\nx = pyitruediv(x, y) is equivalent to x /= y in Python.\n\n\n\n\n\n","category":"function"},{"location":"pythonjl/#Python.pymod","page":"Python from Julia","title":"Python.pymod","text":"pymod([T=PyObject,] x, y) :: T\n\nEquivalent to x % y in Python.\n\n\n\n\n\n","category":"function"},{"location":"pythonjl/#Python.pyimod","page":"Python from Julia","title":"Python.pyimod","text":"pyimod([T=typeof(x),] x, y) :: T\n\nx = pyimod(x, y) is equivalent to x %= y in Python.\n\n\n\n\n\n","category":"function"},{"location":"pythonjl/#Python.pydivmod","page":"Python from Julia","title":"Python.pydivmod","text":"pydivmod([T=PyObject,] x, y) :: T\n\nEquivalent to divmod(x, y) in Python.\n\n\n\n\n\n","category":"function"},{"location":"pythonjl/#Python.pylshift","page":"Python from Julia","title":"Python.pylshift","text":"pylshift([T=PyObject,] x, y) :: T\n\nEquivalent to x << y in Python.\n\n\n\n\n\n","category":"function"},{"location":"pythonjl/#Python.pyilshift","page":"Python from Julia","title":"Python.pyilshift","text":"pyilshift([T=typeof(x),] x, y) :: T\n\nx = pyilshift(x, y) is equivalent to x <<= y in Python.\n\n\n\n\n\n","category":"function"},{"location":"pythonjl/#Python.pyrshift","page":"Python from Julia","title":"Python.pyrshift","text":"pyrshift([T=PyObject,] x, y) :: T\n\nEquivalent to x >> y in Python.\n\n\n\n\n\n","category":"function"},{"location":"pythonjl/#Python.pyirshift","page":"Python from Julia","title":"Python.pyirshift","text":"pyirshift([T=typeof(x),] x, y) :: T\n\nx = pyirshift(x, y) is equivalent to x >>= y in Python.\n\n\n\n\n\n","category":"function"},{"location":"pythonjl/#Python.pyand","page":"Python from Julia","title":"Python.pyand","text":"pyand([T=PyObject,] x, y) :: T\n\nEquivalent to x & y in Python.\n\n\n\n\n\n","category":"function"},{"location":"pythonjl/#Python.pyiand","page":"Python from Julia","title":"Python.pyiand","text":"pyiand([T=typeof(x),] x, y) :: T\n\nx = pyiand(x, y) is equivalent to x &= y in Python.\n\n\n\n\n\n","category":"function"},{"location":"pythonjl/#Python.pyor","page":"Python from Julia","title":"Python.pyor","text":"pyor([T=PyObject,] x, y) :: T\n\nEquivalent to x | y in Python.\n\n\n\n\n\n","category":"function"},{"location":"pythonjl/#Python.pyior","page":"Python from Julia","title":"Python.pyior","text":"pyior([T=typeof(x),] x, y) :: T\n\nx = pyior(x, y) is equivalent to x |= y in Python.\n\n\n\n\n\n","category":"function"},{"location":"pythonjl/#Python.pyxor","page":"Python from Julia","title":"Python.pyxor","text":"pyxor([T=PyObject,] x, y) :: T\n\nEquivalent to x ^ y in Python.\n\n\n\n\n\n","category":"function"},{"location":"pythonjl/#Python.pyixor","page":"Python from Julia","title":"Python.pyixor","text":"pyixor([T=typeof(x),] x, y) :: T\n\nx = pyixor(x, y) is equivalent to x ^= y in Python.\n\n\n\n\n\n","category":"function"},{"location":"pythonjl/#Python.pypow","page":"Python from Julia","title":"Python.pypow","text":"pypow([T=PyObject,] x, y, [z]) :: T\n\nEquivalent to x**y or pow(x, y, z) in Python.\n\n\n\n\n\n","category":"function"},{"location":"pythonjl/#Python.pyipow","page":"Python from Julia","title":"Python.pyipow","text":"pyipow([T=typeof(x),] x, y, [z]) :: T\n\nx = pyipow(x, y) is equivalent to x **= y in Python.\n\n\n\n\n\n","category":"function"},{"location":"pythonjl/#Python.pyneg","page":"Python from Julia","title":"Python.pyneg","text":"pyneg([T=typeof(x),] x) :: T\n\nEquivalent to -x in Python.\n\n\n\n\n\n","category":"function"},{"location":"pythonjl/#Python.pypos","page":"Python from Julia","title":"Python.pypos","text":"pypos([T=typeof(x),] x) :: T\n\nEquivalent to +x in Python.\n\n\n\n\n\n","category":"function"},{"location":"pythonjl/#Python.pyabs","page":"Python from Julia","title":"Python.pyabs","text":"pyabs([T=typeof(x),] x) :: T\n\nEquivalent to abs(x) in Python.\n\n\n\n\n\n","category":"function"},{"location":"pythonjl/#Python.pyinv","page":"Python from Julia","title":"Python.pyinv","text":"pyinv([T=typeof(x),] x) :: T\n\nEquivalent to -x in Python.\n\n\n\n\n\n","category":"function"},{"location":"pythonjl/#Wrapper-types","page":"Python from Julia","title":"Wrapper types","text":"","category":"section"},{"location":"pythonjl/","page":"Python from Julia","title":"Python from Julia","text":"PyList\nPySet\nPyDict\nPyIterable\nPyArray\nPyBuffer\nPyIO\nPyPandasDataFrame","category":"page"},{"location":"pythonjl/#Python.PyList","page":"Python from Julia","title":"Python.PyList","text":"PyList{T=PyObject}([o])\n\nWrap the Python list o (or anything satisfying the sequence interface) as a Julia vector with elements of type T.\n\nIf o is not given, an empty list is created.\n\n\n\n\n\n","category":"type"},{"location":"pythonjl/#Python.PySet","page":"Python from Julia","title":"Python.PySet","text":"PySet{T=PyObject}([o])\n\nWrap the Python set o (or anything satisfying the set interface) as a Julia set with elements of type T.\n\nIf o is not given, an empty set is created.\n\n\n\n\n\n","category":"type"},{"location":"pythonjl/#Python.PyDict","page":"Python from Julia","title":"Python.PyDict","text":"PyDict{K=PyObject, V=PyObject}([o])\n\nWrap the Python dictionary o (or anything satisfying the mapping interface) as a Julia dictionary with keys of type K and values of type V.\n\nIf o is not given, an empty dict is created.\n\n\n\n\n\n","category":"type"},{"location":"pythonjl/#Python.PyIterable","page":"Python from Julia","title":"Python.PyIterable","text":"PyIterable{T=PyObject}(o)\n\nWrap the Python object o into a Julia object which iterates values of type T.\n\n\n\n\n\n","category":"type"},{"location":"pythonjl/#Python.PyArray","page":"Python from Julia","title":"Python.PyArray","text":"PyArray{T,N,R,M,L}(o)\n\nInterpret the Python array o as a Julia array.\n\nThe input may be anything supporting the buffer protocol or the numpy array interface. This includes bytes, bytearray, array.array, numpy.ndarray, pandas.Series.\n\nAll type parameters are optional:\n\nT is the (Julia) element type.\nN is the number of dimensions.\nR is the type of elements of the underlying buffer (which may be different from T to allow some basic conversion).\nM is true if the array is mutable.\nL is true if the array supports fast linear indexing.\n\n\n\n\n\n","category":"type"},{"location":"pythonjl/#Python.PyBuffer","page":"Python from Julia","title":"Python.PyBuffer","text":"PyBuffer(o, [flags=C.PyBUF_FULL_RO])\n\nA reference to the underlying buffer of o, if it satisfies the buffer protocol.\n\nHas the following properties:\n\nbuf: Pointer to the data.\nobj: The exporting object (usually o).\nlen: The length of the buffer in bytes.\nreadonly: True if the buffer is immutable.\nitemsize: The size of each element.\nformat: The struct-syntax format of the element type.\nndim: The number of dimensions.\nshape: The length of the buffer in each dimension.\nstrides: The strides (in bytes) of the buffer in each dimension.\nsuboffsets: For indirect arrays. See the buffer protocol documentation.\nisccontiguous: True if the buffer is C-contiguous (e.g. numpy arrays).\nisfcontiguous: True if the buffer is Fortran-contiguous (e.g. Julia arrays).\neltype: The element type.\n\n\n\n\n\n","category":"type"},{"location":"pythonjl/#Python.PyIO","page":"Python from Julia","title":"Python.PyIO","text":"PyIO(o; own=false, text=missing, buflen=4096)\n\nWrap the Python byte-based IO stream o as a Julia IO stream.\n\nWhen this goes out of scope and is finalized, it is automatically flushed. If own=true then it is also closed.\n\nIf text=false then o must be a binary stream and arbitrary binary I/O is possible. If text=true then o must be a text stream and only UTF-8 must be written (i.e. use print not write). If text is not specified then it is chosen automatically. If o is a text stream and you really need a binary stream, then often PyIO(o.buffer) will work.\n\nFor efficiency, reads and writes are buffered before being sent to o. The size of the buffer is buflen.\n\n\n\n\n\n","category":"type"},{"location":"pythonjl/#Python.PyPandasDataFrame","page":"Python from Julia","title":"Python.PyPandasDataFrame","text":"PyPandasDataFrame(o; indexname=:index, columntypes=(), copy=false)\n\nWrap the Pandas dataframe o as a Julia table.\n\nThis object satisfies the Tables.jl and TableTraits.jl interfaces.\n\n:indexname is the name of the index column when converting this to a table, and may be nothing to exclude the index.\n:columntypes is an iterable of columnname=>type or [columnnames...]=>type pairs, used when converting to a table.\n:copy is true to copy columns on conversion.\n\n\n\n\n\n","category":"type"}]
}
